const STYLE_KEY = {
  POSITION: 0,
  DISPLAY: 1,
  TOP: 2,
  RIGHT: 3,
  BOTTOM: 4,
  LEFT: 5,
  MARGIN_TOP: 6,
  MARGIN_RIGHT: 7,
  MARGIN_BOTTOM: 8,
  MARGIN_LEFT: 9,
  PADDING_TOP: 10,
  PADDING_RIGHT: 11,
  PADDING_BOTTOM: 12,
  PADDING_LEFT: 13,
  FONT_SIZE: 14,
  FONT_FAMILY: 15,
  COLOR: 16,
  FONT_STYLE: 17,
  FONT_WEIGHT: 18,
  LINE_HEIGHT: 19,
  BACKGROUND_IMAGE: 20,
  BACKGROUND_COLOR: 21,
  BACKGROUND_SIZE: 22,
  BACKGROUND_REPEAT: 23,
  BACKGROUND_POSITION_X: 24,
  BACKGROUND_POSITION_Y: 25,
  BORDER_TOP_WIDTH: 26,
  BORDER_RIGHT_WIDTH: 27,
  BORDER_BOTTOM_WIDTH: 28,
  BORDER_LEFT_WIDTH: 29,
  BORDER_TOP_COLOR: 30,
  BORDER_RIGHT_COLOR: 31,
  BORDER_BOTTOM_COLOR: 32,
  BORDER_LEFT_COLOR: 33,
  BORDER_TOP_STYLE: 34,
  BORDER_RIGHT_STYLE: 35,
  BORDER_BOTTOM_STYLE: 36,
  BORDER_LEFT_STYLE: 37,
  BORDER_TOP_LEFT_RADIUS: 38,
  BORDER_TOP_RIGHT_RADIUS: 39,
  BORDER_BOTTOM_RIGHT_RADIUS: 40,
  BORDER_BOTTOM_LEFT_RADIUS: 41,
  WIDTH: 42,
  HEIGHT: 43,
  FLEX_GROW: 44,
  FLEX_SHRINK: 45,
  FLEX_BASIS: 46,
  FLEX_DIRECTION: 47,
  JUSTIFY_CONTENT: 48,
  ALIGN_ITEMS: 49,
  ALIGN_SELF: 50,
  TEXT_ALIGN: 51,
  TRANSFORM_ORIGIN: 52,
  VISIBILITY: 53,
  OPACITY: 54,
  Z_INDEX: 55,
  TRANSFORM: 56,
  TRANSLATE_X: 57,
  TRANSLATE_Y: 58,
  SCALE_X: 59,
  SCALE_Y: 60,
  SKEW_X: 61,
  SKEW_Y: 62,
  ROTATE_Z: 63,
  FILTER: 64,
  BOX_SHADOW: 65,
  POINTER_EVENTS: 66,
  OVERFLOW: 67,
  MIX_BLEND_MODE: 68,
  // GEOM
  FILL: 69,
  STROKE: 70,
  STROKE_WIDTH: 71,
  STROKE_DASHARRAY: 72,
  STROKE_LINECAP: 73,
  STROKE_LINEJOIN: 74,
  STROKE_MITERLIMIT: 75,
  FILL_RULE: 76,
  MATRIX: 77,
  // 无此样式，仅cache需要
  BORDER_TOP: 78,
  BORDER_RIGHT: 79,
  BORDER_BOTTOM: 80,
  BORDER_LEFT: 81,
};

function style2Lower(s) {
  return s.replace(/[A-Z]/g, function($0) {
    return $0.toLowerCase();
  }).replace(/_([a-z])/g, function($0, $1) {
    return $1.toUpperCase();
  });
}

function style2Upper(s) {
  return s.replace(/[A-Z]/g, function($0) {
    return '_' + $0.toUpperCase();
  }).replace(/[a-z]/g, function($0) {
    return $0.toUpperCase();
  });
}

const STYLE_R_KEY = {};
const STYLE_RV_KEY = {};
Object.keys(STYLE_KEY).forEach(k => {
  let k2 = STYLE_KEY[k];
  STYLE_R_KEY[k2] = k;
  STYLE_RV_KEY[k2] = style2Lower(k);
});

const UPDATE_NODE = 0;
const UPDATE_STYLE = 1;
const UPDATE_FOCUS = 2;
const UPDATE_MEASURE = 3;
const UPDATE_COMPONENT = 4;
const UPDATE_IMG = 5;
const UPDATE_OVERWRITE = 6;
const UPDATE_KEYS = 7;
const UPDATE_LIST = 8;

const FRAME_STYLE = 0;
const FRAME_TIME = 1;
const FRAME_EASING = 2;
const FRAME_TRANSITION = 3;

const NODE_DOM_PARENT = 0;
const NODE_OPACITY = 1;
const NODE_MATRIX = 2;
const NODE_MATRIX_EVENT = 3;
const NODE_CACHE = 4;
const NODE_CACHE_TOTAL = 5;
const NODE_CACHE_FILTER = 6;
const NODE_CACHE_MASK = 7;
const NODE_CACHE_OVERFLOW = 8;
const NODE_STRUCT = 9;
const NODE_TAG_NAME = 10;
const NODE_CURRENT_STYLE = 11;
const NODE_CURRENT_PROPS = 12;
const NODE_COMPUTED_STYLE = 13;
const NODE_CACHE_STYLE = 14;
const NODE_CACHE_PROPS = 15;
const NODE_LIMIT_CACHE = 16;
const NODE_IS_MASK = 17;
const NODE_BLUR_VALUE = 18;
const NODE_HAS_CONTENT = 19;
const NODE_REFRESH_LV = 20;
const NODE_IS_DESTROYED = 21;
const NODE_STYLE = 22;
const NODE_UPDATE_HASH = 23;
const NODE_UNIQUE_UPDATE_ID = 24;

const STRUCT_NODE = 0;
const STRUCT_INDEX = 1;
const STRUCT_CHILD_INDEX = 2;
const STRUCT_LV = 3;
const STRUCT_NUM = 4;
const STRUCT_TOTAL = 5;
const STRUCT_HAS_MASK = 6;

export default {
  STYLE_KEY,
  STYLE_R_KEY,
  STYLE_RV_KEY,
  style2Lower,
  style2Upper,
  // Root的update过程使用
  UPDATE_NODE,
  UPDATE_STYLE,
  UPDATE_FOCUS,
  UPDATE_MEASURE,
  UPDATE_COMPONENT,
  UPDATE_IMG,
  UPDATE_OVERWRITE,
  UPDATE_KEYS,
  UPDATE_LIST,
  // Animation的frame使用
  FRAME_STYLE,
  FRAME_TIME,
  FRAME_EASING,
  FRAME_TRANSITION,
  // node用
  NODE_DOM_PARENT,
  NODE_OPACITY,
  NODE_MATRIX,
  NODE_MATRIX_EVENT,
  NODE_CACHE,
  NODE_CACHE_TOTAL,
  NODE_CACHE_FILTER,
  NODE_CACHE_MASK,
  NODE_CACHE_OVERFLOW,
  NODE_STRUCT,
  NODE_TAG_NAME,
  NODE_CURRENT_STYLE,
  NODE_CURRENT_PROPS,
  NODE_COMPUTED_STYLE,
  NODE_CACHE_STYLE,
  NODE_CACHE_PROPS,
  NODE_LIMIT_CACHE,
  NODE_IS_MASK,
  NODE_BLUR_VALUE,
  NODE_HAS_CONTENT,
  NODE_REFRESH_LV,
  NODE_IS_DESTROYED,
  NODE_STYLE,
  NODE_UPDATE_HASH,
  NODE_UNIQUE_UPDATE_ID,
  // struct用
  STRUCT_NODE,
  STRUCT_INDEX,
  STRUCT_CHILD_INDEX,
  STRUCT_LV,
  STRUCT_TOTAL,
  STRUCT_NUM,
  STRUCT_HAS_MASK,
};
