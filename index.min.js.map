{"version":3,"file":"index.min.js","sources":["src/node/Node.js","src/style/unit.js","src/style/font.js","src/style/reset.js","src/util.js","src/style/css.js","src/node/LineBox.js","src/node/Text.js","src/node/LineGroup.js","src/geom/Geom.js","src/node/Dom.js","src/node/Canvas.js","src/geom/Line.js","src/geom/Polygon.js","src/index.js"],"sourcesContent":["function arr2hash(arr) {\n  let hash = {};\n  for(let i = 0, len = arr.length; i < len; i++) {\n    let item = arr[i];\n    if(Array.isArray(item)) {\n      hash[item[0]] = item[1];\n    }\n    else {\n      for(let list = Object.keys(item), j = list.length - 1; j >= 0; j--) {\n        let k = list[j];\n        hash[k] = item[k];\n      }\n    }\n  }\n  return hash;\n}\n\nfunction hash2arr(hash) {\n  let arr = [];\n  for(let list = Object.keys(hash), i = 0, len = list.length; i < len; i++) {\n    let k = list[i];\n    arr.push([k, hash[k]]);\n  }\n  return arr;\n}\n\nfunction spread(arr) {\n  for(let i = 0, len = arr.length; i < len; i++) {\n    let item = arr[i];\n    if(!Array.isArray(item)) {\n      let temp = [];\n      for(let list = Object.keys(item), j = 0, len = list.length; j < len; j++) {\n        let k = list[j];\n        temp.push([k, item[k]]);\n      }\n      arr.splice(i, 1, ...temp);\n    }\n  }\n  return arr;\n}\n\nclass Node {\n  constructor(props) {\n    props = props || [];\n    // 构建工具中都是arr，手写可能出现hash情况\n    if(Array.isArray(props)) {\n      this.props = arr2hash(props);\n      this.__props = spread(props);\n    }\n    else {\n      this.props = props;\n      this.__props = hash2arr(props);\n    }\n    this.__x = 0;\n    this.__y = 0;\n    this.__width = 0;\n    this.__height = 0;\n    this.__prev = null;\n    this.__next = null;\n    this.__ctx = null; // canvas的context\n    this.__parent = null;\n    this.__style = this.props.style || {}; // style被解析后的k-v形式\n    this.__baseLine = 0;\n  }\n\n  get x() {\n    return this.__x;\n  }\n  get y() {\n    return this.__y;\n  }\n  get width() {\n    return this.__width;\n  }\n  get height() {\n    return this.__height;\n  }\n  get prev() {\n    return this.__prev;\n  }\n  get next() {\n    return this.__next;\n  }\n  get parent() {\n    return this.__parent;\n  }\n  get style() {\n    return this.__style;\n  }\n  get ctx() {\n    return this.__ctx;\n  }\n  get baseLine() {\n    return this.__baseLine;\n  }\n}\n\nexport default Node;\n","export default {\n  AUTO: 0,\n  PX: 1,\n  PERCENT: 2,\n};\n","'use strict';\n\nexport default {\n  arial: {\n    lhr: 1.14990234375, // 默认line-height ratio，(67+1854+434)/2048\n    car: 1.1171875, // content-area ratio，(1854+434)/2048\n    blr: 0.9052734375, // base-line ratio，1854/2048\n    mdr: 0.64599609375, // middle ratio，(1854-1062/2)/2048\n    lgr: 0.03271484375, // line-gap ratio，67/2048\n  },\n};\n","const RESET = {\n  display: 'block',\n  borderSizing: 'content-box',\n  marginTop: 0,\n  marginRight: 0,\n  marginBottom: 0,\n  marginLeft: 0,\n  paddingTop: 0,\n  paddingRight: 0,\n  paddingBottom: 0,\n  paddingLeft: 0,\n  fontSize: 16,\n  fontFamily: 'arial',\n  color: '#000',\n  fontStyle: 'normal',\n  fontWeight: 400,\n  lineHeight: 'normal',\n  borderTopWidth: 0,\n  borderRightWidth: 0,\n  borderBottomWidth: 0,\n  borderLeftWidth: 0,\n  borderTopStyle: 'solid',\n  borderRightStyle: 'solid',\n  borderBottomStyle: 'solid',\n  borderLeftStyle: 'solid',\n  verticalAlign: 'baseline',\n  width: 'auto',\n  height: 'auto',\n  flexGrow: 0,\n  flexShrink: 1,\n  flexBasis: 'auto',\n  flexDirection: 'row',\n  justifyContent: 'flex-start',\n  alignItem: 'stretch',\n  textAlign: 'left',\n  stroke: '#000',\n  strokeWidth: 1,\n};\n\nlet reset = [];\n\nObject.keys(RESET).forEach(k => {\n  let v = RESET[k];\n  reset.push({\n    k,\n    v,\n  });\n});\n\nexport default reset;\n","let toString = {}.toString;\nfunction isType(type) {\n  return function(obj) {\n    return toString.call(obj) === '[object ' + type + ']';\n  }\n}\n\nlet isNumber = isType('Number');\n\nfunction joinSourceArray(arr) {\n  var res = '';\n  for(var i = 0, len = arr.length; i < len; i++) {\n    var item = arr[i];\n    if(Array.isArray(item)) {\n      res += joinSourceArray(item);\n    }\n    else {\n      res += stringify(item);\n    }\n  }\n  return res;\n}\n\nfunction stringify(s) {\n  if(isNil(s)) {\n    return '';\n  }\n  return s.toString();\n}\n\nfunction encodeHtml(s, prop) {\n  if(prop) {\n    return s.replace(/\"/g, '&quot;');\n  }\n  return s.replace(/&/g, '&amp;').replace(/</g, '&lt;');\n}\n\nfunction isNil(v) {\n  return v === undefined || v === null;\n}\n\nlet util = {\n  isObject: isType('Object'),\n  isString: isType('String'),\n  isFunction: isType('Function'),\n  isNumber,\n  isBoolean: isType('Boolean'),\n  isDate: isType('Date'),\n  stringify,\n  joinSourceArray(arr) {\n    return joinSourceArray(arr);\n  },\n  encodeHtml,\n  isNil,\n};\n\nexport default util;\n","import unit from './unit';\nimport font from './font';\nimport reset from './reset';\nimport util from '../util';\n\nfunction parserOneBorder(style, direction) {\n  let key = `border${direction}`;\n  if(!style[key]) {\n    return;\n  }\n  let w = /\\b\\d+px\\b/i.exec(style[key]);\n  if(w) {\n    style[key + 'Width'] = w[0];\n  }\n  let s = /\\bsolid\\b/i.exec(style[key]);\n  if(s) {\n    style[key + 'Style'] = s[0];\n  }\n  let c = /#[0-9a-f]{3,6}/i.exec(style[key]);\n  if(c && [4, 7].indexOf(c[0].length) > -1) {\n    style[key + 'Color'] = c[0];\n  }\n}\n\nfunction normalize(style) {\n  // 默认reset\n  reset.forEach(item => {\n    if(!style.hasOwnProperty(item.k)) {\n      style[item.k] = item.v;\n    }\n  });\n  // 处理缩写\n  // TODO: 重复声明时优先级\n  if(style.background) {\n    let bgc = /#[0-9a-f]{3,6}/i.exec(style.background);\n    if(bgc && [4, 7].indexOf(bgc[0].length) > -1) {\n      style.backgroundColor = bgc[0];\n    }\n  }\n  if(style.flex) {\n    if(style.flex === 'none') {\n      style.flexGrow = 0;\n      style.flexShrink = 0;\n      style.flexBasis = 'auto';\n    }\n    else if(style.flex === 'auto') {\n      style.flexGrow = 1;\n      style.flexShrink = 1;\n      style.flexBasis = 'auto';\n    }\n    else if(/^[\\d.]+$/.test(style.flex)) {\n      style.flexGrow = parseFloat(style.flex);\n      style.flexShrink = 1;\n      style.flexBasis = 0;\n    }\n    else if(/^[\\d.]+px$/.test(style.flex)) {}\n    else if(/^[\\d.]+%$/.test(style.flex)) {}\n    else {\n      style.flexGrow = 0;\n      style.flexShrink = 1;\n      style.flexBasis = 'auto';\n    }\n  }\n  if(style.border) {\n    style.borderTop = style.borderRight = style.borderBottom = style.borderLeft = style.border;\n  }\n  parserOneBorder(style, 'Top');\n  parserOneBorder(style, 'Right');\n  parserOneBorder(style, 'Bottom');\n  parserOneBorder(style, 'Left');\n  // 转化不同单位值为对象标准化\n  [\n    'marginTop',\n    'marginRight',\n    'marginDown',\n    'marginLeft',\n    'paddingTop',\n    'paddingRight',\n    'paddingDown',\n    'paddingLeft',\n    'borderTopWidth',\n    'borderRightWidth',\n    'borderBottomWidth',\n    'borderLeftWidth',\n    'width',\n    'height',\n    'flexBasis',\n  ].forEach(k => {\n    let v = style[k];\n    // 编译工具前置解析优化跳出\n    if(!util.isNil(v) && v.unit) {\n      return;\n    }\n    if(v === 'auto') {\n      style[k] = {\n        unit: unit.AUTO,\n      };\n    }\n    else if(/%$/.test(v)) {\n      v = parseFloat(v) || 0;\n      if(v <= 0) {\n        style[k] = {\n          value: 0,\n          unit: unit.PX,\n        };\n      }\n      else {\n        style[k] = {\n          value: v,\n          unit: unit.PERCENT,\n        };\n      }\n    }\n    else {\n      v = parseFloat(v) || 0;\n      style[k] = {\n        value: Math.max(v, 0),\n        unit: unit.PX,\n      };\n    }\n  });\n  // 计算lineHeight为px值，最小范围\n  let lineHeight = style.lineHeight;\n  if(lineHeight === 'normal') {\n    lineHeight = {\n      value: style.fontSize * font.arial.lhr,\n      unit: unit.PX,\n    };\n  }\n  else if(/px$/.test(lineHeight)) {\n    lineHeight = parseFloat(lineHeight);\n    lineHeight = {\n      value: Math.max(style.fontSize, lineHeight),\n      unit: unit.PX,\n    };\n  }\n  // 纯数字比例\n  else {\n    lineHeight = parseFloat(lineHeight) || 'normal';\n    // 非法数字\n    if(lineHeight === 'normal') {\n      lineHeight = {\n        value: style.fontSize * font.arial.lhr,\n        unit: unit.PX,\n      };\n    }\n    else {\n      lineHeight = {\n        value: lineHeight * style.fontSize,\n        unit: unit.PX,\n      };\n    }\n  }\n  style.lineHeight = lineHeight;\n}\n\nfunction setFontStyle(style) {\n  let { fontStyle, fontWeight, fontSize, fontFamily } = style;\n  return `${fontStyle} ${fontWeight} ${fontSize}px/${fontSize}px ${fontFamily}`;\n}\n\nfunction getBaseLine(style) {\n  let normal = style.fontSize * font.arial.lhr;\n  return (style.lineHeight.value - normal) * 0.5 + style.fontSize * font.arial.blr;\n}\n\nexport default {\n  normalize,\n  setFontStyle,\n  getBaseLine,\n};\n","import css from '../style/css';\n\nclass LineBox {\n  constructor(ctx, x, y, content, style) {\n    this.__ctx = ctx;\n    this.__x = x;\n    this.__y = y;\n    this.__content = content;\n    this.__style = style;\n  }\n\n  render() {\n    this.ctx.fillStyle = this.style.color;\n    this.ctx.fillText(this.content, this.x, this.y + css.getBaseLine(this.style));\n  }\n\n  __offsetX(diff) {\n    this.__x += diff;\n  }\n\n  __offsetY(diff) {\n    this.__y += diff;\n  }\n\n  get ctx() {\n    return this.__ctx;\n  }\n  get x() {\n    return this.__x;\n  }\n  get y() {\n    return this.__y;\n  }\n  get content() {\n    return this.__content;\n  }\n  get style() {\n    return this.__style;\n  }\n  get baseLine() {\n    return css.getBaseLine(this.style);\n  }\n}\n\nexport default LineBox;\n","import Node from './Node';\nimport LineBox from './LineBox';\nimport css from '../style/css';\n\nconst CHAR_WIDTH_CACHE = {};\n\nclass Text extends Node {\n  constructor(content) {\n    super();\n    this.__content = content.toString();\n    this.__lineBoxes = [];\n    this.__charWidthList = [];\n    this.__charWidth = 0;\n    this.__textWidth = 0;\n  }\n\n  // 预先计算每个字的宽度\n  __measure() {\n    this.__charWidthList = [];\n    let { ctx, content, style, charWidthList } = this;\n    ctx.font = css.setFontStyle(style);\n    let cache = CHAR_WIDTH_CACHE[style.fontSize] = CHAR_WIDTH_CACHE[style.fontSize] || {};\n    let length = content.length;\n    let sum = 0;\n    for(let i = 0; i < length; i++) {\n      let char = content.charAt(i);\n      let mw = cache.hasOwnProperty(char) ? cache[char] : ctx.measureText(char).width;\n      charWidthList.push(mw);\n      sum += mw;\n      this.__charWidth = Math.max(this.charWidth, mw);\n    }\n    this.__textWidth = sum;\n  }\n\n  __preLay(data, isVirtual) {\n    let { x, y, w, h } = data;\n    this.__x = x;\n    this.__y = y;\n    let maxX = x;\n    let { ctx, content, style, lineBoxes, charWidthList } = this;\n    // 顺序尝试分割字符串为lineBox，形成多行\n    let begin = 0;\n    let i = 0;\n    let count = 0;\n    let length = content.length;\n    while(i < length) {\n      count += charWidthList[i];\n      if (count === w) {\n        let lineBox = new LineBox(ctx, x, y, content.slice(begin, i + 1), style);\n        lineBoxes.push(lineBox);\n        maxX = Math.max(maxX, x + count);\n        y += this.style.lineHeight.value;\n        begin = i + 1;\n        i = begin + 1;\n        count = 0;\n      }\n      else if (count > w) {\n        // 宽度不足时无法跳出循环，至少也要塞个字符形成一行\n        if(i === begin) {\n          i = begin + 1;\n        }\n        let lineBox = new LineBox(ctx, x, y, content.slice(begin, i), style);\n        lineBoxes.push(lineBox);\n        maxX = Math.max(maxX, x + count - charWidthList[i]);\n        y += this.style.lineHeight.value;\n        begin = i;\n        i = i + 1;\n        count = 0;\n      }\n      else {\n        i++;\n      }\n    }\n    if(begin < length && begin < i) {\n      let lineBox = new LineBox(ctx, x, y, content.slice(begin, i), style);\n      lineBoxes.push(lineBox);\n      maxX = Math.max(maxX, x + count);\n      y += this.style.lineHeight.value;\n    }\n    this.__width = maxX - x;\n    this.__height = y - data.y;\n    if(isVirtual) {\n      this.__lineBoxes = [];\n    }\n  }\n\n  render() {\n    this.ctx.font = css.setFontStyle(this.style);\n    this.lineBoxes.forEach(item => {\n      item.render();\n    });\n  }\n\n  __tryLayInline(w) {\n    this.ctx.font = css.setFontStyle(this.style);\n    let tw = this.ctx.measureText(this.content).width;\n    return w - tw;\n  }\n\n  __offsetX(diff) {\n    this.__x += diff;\n    this.lineBoxes.forEach(item => {\n      item.__offsetX(diff);\n    });\n  }\n\n  __offsetY(diff) {\n    this.__y += diff;\n    this.lineBoxes.forEach(item => {\n      item.__offsetY(diff);\n    });\n  }\n\n  __calMaxAndMinWidth() {\n    let n = 0;\n    this.charWidthList.forEach(item => {\n      n = Math.max(n, item);\n    });\n    return { max: this.textWidth, min: n };\n  }\n\n  get content() {\n    return this.__content;\n  }\n  set content(v) {\n    this.__content = v;\n  }\n  get lineBoxes() {\n    return this.__lineBoxes;\n  }\n  get charWidthList() {\n    return this.__charWidthList;\n  }\n  get charWidth() {\n    return this.__charWidth;\n  }\n  get textWidth() {\n    return this.__textWidth;\n  }\n  get baseLine() {\n    let last = this.lineBoxes[this.lineBoxes.length - 1];\n    return last.y - this.y + last.baseLine;\n  }\n  get outerWidth() {\n    return this.__width;\n  }\n  get outerHeight() {\n    return this.__height;\n  }\n}\n\nexport default Text;\n","class LineGroup {\n  constructor(x, y) {\n    this.__list = [];\n    this.__x = x;\n    this.__y = y;\n    this.__height = 0;\n    this.__baseLine = 0;\n  }\n\n  add(item) {\n    this.list.push(item);\n  }\n\n  __calBaseLine() {\n    let baseLine = 0;\n    this.list.forEach(item => {\n      baseLine = Math.max(baseLine, item.baseLine);\n    });\n    return baseLine;\n  }\n\n  __calHeight() {\n    let height = 0;\n    this.list.forEach(item => {\n      height = Math.max(height, item.height);\n    });\n    return height;\n  }\n\n  verticalAlign() {\n    this.__height = this.__calHeight();\n    this.__baseLine = this.__calBaseLine();\n    // 仅当有2个和以上时才需要vertical对齐调整\n    if(this.list.length > 1) {\n      this.list.forEach(item => {\n        if(item.baseLine !== this.baseLine) {\n          item.__offsetY(this.baseLine - item.baseLine);\n        }\n      });\n    }\n  }\n\n  get list() {\n    return this.__list;\n  }\n  get x() {\n    return this.__x;\n  }\n  get y() {\n    return this.__y;\n  }\n  get height() {\n    return this.__height;\n  }\n  get baseLine() {\n    return this.__baseLine;\n  }\n  get size() {\n    return this.__list.length;\n  }\n}\n\nexport default LineGroup;\n","import Node from '../node/Node';\nimport css from '../style/css';\nimport unit from '../style/unit';\n\nconst TAG_NAME = {\n  '$line': true,\n  '$polygon': true,\n};\n\nclass Geom extends Node {\n  constructor(props) {\n    super(props);\n  }\n\n  __initStyle() {\n    css.normalize(this.style);\n  }\n\n  __calAutoBasis(isDirectionRow, w, h) {\n    let b = 0;\n    let min = 0;\n    let max = 0;\n    let { style } = this;\n    // 计算需考虑style的属性\n    let {\n      width,\n      height,\n      borderTopWidth,\n      borderRightWidth,\n      borderBottomWidth,\n      borderLeftWidth,\n    } = style;\n    let main = isDirectionRow ? width : height;\n    if(main.unit !== unit.AUTO) {\n      b = max += main.value;\n    }\n    // border也得计算在内\n    if(isDirectionRow) {\n      let w = borderRightWidth.value + borderLeftWidth.value;\n      b += w;\n      max += w;\n      min += w;\n    }\n    else {\n      let h = borderTopWidth.value + borderBottomWidth.value;\n      b += h;\n      max += h;\n      min += h;\n    }\n    return { b, min, max };\n  }\n\n  __preLay(data) {\n    let { style } = this;\n    if(style.display === 'block') {\n      this.__preLayBlock(data);\n    }\n    else if(style.display === 'flex') {\n      this.__preLayFlex(data);\n    }\n    else {\n      this.__preLayInline(data);\n    }\n  }\n\n  __preLayInline(data) {\n    let { x, y, w, h } = data;\n    this.__x = x;\n    this.__y = y;\n    let { style } = this;\n    let {\n      width,\n      height,\n      borderTopWidth,\n      borderRightWidth,\n      borderBottomWidth,\n      borderLeftWidth,\n    } = style;\n    // 除了auto外都是固定高度\n    let fixedWidth;\n    let fixedHeight;\n    if(width && width.unit !== unit.AUTO) {\n      fixedWidth = true;\n      switch(width.unit) {\n        case unit.PX:\n          w = width.value;\n          break;\n      }\n    }\n    if(height && height.unit !== unit.AUTO) {\n      fixedHeight = true;\n      switch(height.unit) {\n        case unit.PX:\n          h = height.value;\n          break;\n      }\n    }\n    // border影响x和y\n    x += borderLeftWidth.value;\n    data.x = x;\n    y += borderTopWidth.value;\n    data.y = y;\n    w -= borderLeftWidth.value + borderRightWidth.value;\n    h -= borderTopWidth.value + borderBottomWidth.value;\n    // 元素的width不能超过父元素w\n    this.__width = fixedWidth ? w : x - data.x;\n    this.__height = fixedHeight ? h : y - data.y;\n  }\n\n  render() {\n    let { ctx, style, x, y, width, height } = this;\n    let {\n      backgroundColor,\n      borderTopWidth,\n      borderTopColor,\n      borderRightWidth,\n      borderRightColor,\n      borderBottomWidth,\n      borderBottomColor,\n      borderLeftWidth,\n      borderLeftColor,\n    } = style;\n    if(backgroundColor) {\n      ctx.beginPath();\n      ctx.fillStyle = backgroundColor;\n      ctx.rect(this.x, this.y, this.width, this.height);\n      ctx.fill();\n      ctx.closePath();\n    }\n    if(borderTopWidth.value) {\n      ctx.beginPath();\n      ctx.lineWidth = borderTopWidth.value;\n      ctx.strokeStyle = borderTopColor;\n      let y2 = y + borderTopWidth.value * 0.5;\n      ctx.moveTo(x + borderLeftWidth.value, y2);\n      ctx.lineTo(x + borderLeftWidth.value + width, y2);\n      ctx.stroke();\n      ctx.closePath();\n    }\n    if(borderRightWidth.value) {\n      ctx.beginPath();\n      ctx.lineWidth = borderRightWidth.value;\n      ctx.strokeStyle = borderRightColor;\n      let x2 = x + width + borderLeftWidth.value + borderRightWidth.value * 0.5;\n      ctx.moveTo(x2, y);\n      ctx.lineTo(x2, y + height + borderTopWidth.value + borderBottomWidth.value);\n      ctx.stroke();\n      ctx.closePath();\n    }\n    if(borderBottomWidth.value) {\n      ctx.beginPath();\n      ctx.lineWidth = borderBottomWidth.value;\n      ctx.strokeStyle = borderBottomColor;\n      let y2 = y + height + borderTopWidth.value + borderBottomWidth.value * 0.5;\n      ctx.moveTo(x + borderLeftWidth.value, y2);\n      ctx.lineTo(x + borderLeftWidth.value + width, y2);\n      ctx.stroke();\n      ctx.closePath();\n    }\n    if(borderLeftWidth.value) {\n      ctx.beginPath();\n      ctx.lineWidth = borderLeftWidth.value;\n      ctx.strokeStyle = borderLeftColor;\n      ctx.moveTo(x + borderLeftWidth.value * 0.5, y);\n      ctx.lineTo(x + borderLeftWidth.value * 0.5, y + height + borderTopWidth.value + borderBottomWidth.value);\n      ctx.stroke();\n      ctx.closePath();\n    }\n  }\n\n  get tagName() {\n    return this.__tagName;\n  }\n  get baseLine() {\n    return 0;\n  }\n  get outerWidth() {\n    let { style: { borderLeftWidth, borderRightWidth } } = this;\n    return this.width + borderLeftWidth.value + borderRightWidth.value;\n  }\n  get outerHeight() {\n    let { style: { borderTopWidth, borderBottomWidth } } = this;\n    return this.height + borderTopWidth.value + borderBottomWidth.value;\n  }\n\n  static isValid(s) {\n    return TAG_NAME.hasOwnProperty(s);\n  }\n}\n\nexport default Geom;\n","import Node from './Node';\nimport Text from './Text';\nimport LineGroup from './LineGroup';\nimport Geom from '../geom/Geom';\nimport util from '../util';\nimport css from '../style/css';\nimport unit from '../style/unit';\n\nconst TAG_NAME = {\n  'div': true,\n  'span': true,\n};\nconst INLINE = {\n  'span': true,\n};\n\nclass Dom extends Node {\n  constructor(tagName, props, children) {\n    super(props);\n    this.__tagName = tagName;\n    this.__children = children;\n    this.__lineGroups = []; // 一行inline元素组成的LineGroup对象后的存放列表\n  }\n\n  /**\n   * 1. 封装string为Text节点\n   * 2. 打平children中的数组，变成一维\n   * 3. 合并相连的Text节点\n   * 4. 检测inline不能包含block\n   * 5. 设置parent和prev/next和ctx\n   */\n  __traverse(ctx) {\n    let list = [];\n    this.__traverseChildren(this.children, list, ctx);\n    for(let i = list.length - 1; i > 0; i--) {\n      let item = list[i];\n      if(item instanceof Text) {\n        let prev = list[i - 1];\n        if(prev instanceof Text) {\n          prev.content += item.content;\n          list.splice(i, 1);\n        }\n        else {\n          i--;\n        }\n      }\n    }\n    if(this.style.display === 'inline' && this.parent.style.display !== 'flex') {\n      for(let i = list.length - 1; i >= 0; i--) {\n        let item = list[i];\n        if(item instanceof Dom && item.style.display !== 'inline') {\n          throw new Error('inline can not contain block');\n        }\n      }\n    }\n    let prev = null;\n    list.forEach(item => {\n      item.__ctx = ctx;\n      if(prev) {\n        prev.__next = item;\n      }\n      item.__parent = this;\n      item.__prev = prev;\n    });\n    this.__children = list;\n  }\n\n  __traverseChildren(children, list, ctx) {\n    if(Array.isArray(children)) {\n      children.forEach(item => {\n        this.__traverseChildren(item, list, ctx);\n      });\n    }\n    else if(children instanceof Dom) {\n      list.push(children);\n      children.__traverse(ctx);\n    }\n    // 图形没有children\n    else if(children instanceof Geom) {\n      list.push(children);\n    }\n    // 排除掉空的文本\n    else if(!util.isNil(children)) {\n      list.push(new Text(children));\n    }\n  }\n\n  // 合并设置style，包括继承和默认值，修改一些自动值和固定值，测量所有文字的宽度\n  __initStyle() {\n    let style = this.__style;\n    // 仅支持flex/block/inline\n    if(!style.display || ['flex', 'block', 'inline'].indexOf(style.display) === -1) {\n      if(INLINE.hasOwnProperty(this.tagName)) {\n        style.display = 'inline';\n      }\n      else {\n        style.display = 'block';\n      }\n    }\n    // 继承父元素样式\n    let parent = this.parent;\n    if(parent) {\n      let parentStyle = parent.style;\n      ['fontSize', 'fontWeight', 'fontStyle', 'lineHeight', 'wordBreak', 'color', 'textAlign'].forEach(k => {\n        if(!style.hasOwnProperty(k) && parentStyle.hasOwnProperty(k)) {\n          style[k] = parentStyle[k];\n        }\n      });\n    }\n    // 标准化处理，默认值、简写属性\n    css.normalize(style);\n    this.children.forEach(item => {\n      if(item instanceof Dom) {\n        item.__initStyle();\n      }\n      else if(item instanceof Geom) {\n        item.__initStyle();\n      }\n      else {\n        item.__style = style;\n        // 文字首先测量所有字符宽度\n        item.__measure();\n      }\n    });\n  }\n\n  // 给定父宽度情况下，尝试行内放下后的剩余宽度，为负数即放不下\n  __tryLayInline(w) {\n    let { children } = this;\n    for(let i = 0; i < children.length; i++) {\n      // 当放不下时直接返回，无需继续多余的尝试计算\n      if(w < 0) {\n        return w;\n      }\n      let item = children[i];\n      if(item instanceof Dom || item instanceof Geom) {\n        w = item.__tryLayInline(w);\n      }\n      else {\n        w -= item.textWidth;\n      }\n    }\n    return w;\n  }\n\n  // 设置y偏移值，递归包括children，此举在flex行元素的child进行justify-content对齐用\n  __offsetX(diff) {\n    this.__x += diff;\n    this.children.forEach(item => {\n      if(item) {\n        item.__offsetX(diff);\n      }\n    });\n  }\n\n  // 设置y偏移值，递归包括children，此举在初步确定inline布局后设置元素vertical-align用\n  __offsetY(diff) {\n    this.__y += diff;\n    this.children.forEach(item => {\n      if(item) {\n        item.__offsetY(diff);\n      }\n    });\n  }\n\n  __calAutoBasis(isDirectionRow, w, h, isRecursion) {\n    let b = 0;\n    let min = 0;\n    let max = 0;\n    let { children, style } = this;\n    // 计算需考虑style的属性\n    let {\n      width,\n      height,\n      borderTopWidth,\n      borderRightWidth,\n      borderBottomWidth,\n      borderLeftWidth,\n    } = style;\n    let main = isDirectionRow ? width : height;\n    if(main.unit !== unit.AUTO) {\n      b = max += main.value;\n      // 递归时children的长度会影响flex元素的最小宽度\n      if(isRecursion) {\n        min = b;\n      }\n    }\n    // 递归children取最大值\n    children.forEach(item => {\n      if(item instanceof Dom || item instanceof Geom) {\n        let { b: b2, min: min2, max: max2 } = item.__calAutoBasis(isDirectionRow, w, h, true);\n        b = Math.max(b, b2);\n        min = Math.max(min, min2);\n        max = Math.max(max, max2);\n      }\n      else if(isDirectionRow) {\n        min = Math.max(item.charWidth, min);\n        max = Math.max(item.textWidth, max);\n      }\n      else {\n        item.__preLay({\n          x: 0,\n          y: 0,\n          w,\n          h,\n        }, true);\n        min = Math.max(min, item.height);\n        max = Math.max(max, item.height);\n      }\n    });\n    // border也得计算在内\n    if(isDirectionRow) {\n      let w = borderRightWidth.value + borderLeftWidth.value;\n      b += w;\n      max += w;\n      min += w;\n    }\n    else {\n      let h = borderTopWidth.value + borderBottomWidth.value;\n      b += h;\n      max += h;\n      min += h;\n    }\n    return { b, min, max };\n  }\n\n  __preLay(data) {\n    let { style } = this;\n    if(style.display === 'block') {\n      this.__preLayBlock(data);\n    }\n    else if(style.display === 'flex') {\n      this.__preLayFlex(data);\n    }\n    else {\n      this.__preLayInline(data);\n    }\n  }\n\n  // 本身block布局时计算好所有子元素的基本位置\n  __preLayBlock(data) {\n    let { x, y, w, h } = data;\n    this.__x = x;\n    this.__y = y;\n    this.__width = w;\n    let { children, style } = this;\n    let {\n      width,\n      height,\n      borderTopWidth,\n      borderRightWidth,\n      borderBottomWidth,\n      borderLeftWidth,\n    } = style;\n    // 除了auto外都是固定高度\n    let fixedHeight;\n    if(width && width.unit !== unit.AUTO) {\n      switch(width.unit) {\n        case unit.PX:\n          w = width.value;\n          break;\n      }\n    }\n    if(height && height.unit !== unit.AUTO) {\n      fixedHeight = true;\n      switch(height.unit) {\n        case unit.PX:\n          h = height.value;\n          break;\n        case unit.PERCENT:\n          h *= height.value * 0.01;\n          break;\n      }\n    }\n    // border影响x和y和尺寸\n    x += borderLeftWidth.value;\n    data.x = x;\n    y += borderTopWidth.value;\n    data.y = y;\n    w -= borderLeftWidth.value + borderRightWidth.value;\n    h -= borderTopWidth.value + borderBottomWidth.value;\n    // 递归布局，将inline的节点组成lineGroup一行\n    let lineGroup = new LineGroup(x, y);\n    children.forEach(item => {\n      if(item instanceof Dom) {\n        if(item.style.display === 'inline') {\n          // inline开头，不用考虑是否放得下直接放\n          if(x === data.x) {\n            lineGroup.add(item);\n            item.__preLayInline({\n              x,\n              y,\n              w,\n              h,\n            });\n            x += item.outerWidth;\n          }\n          else {\n            // 非开头先尝试是否放得下\n            let fw = item.__tryLayInline(w - x);\n            // 放得下继续\n            if(fw >= 0) {\n              item.__preLayInline({\n                x,\n                y,\n                w,\n              });\n            }\n            // 放不下处理之前的lineGroup，并重新开头\n            else {\n              this.lineGroups.push(lineGroup);\n              lineGroup.verticalAlign();\n              x = data.x;\n              y += lineGroup.height;\n              item.__preLayInline({\n                x: data.x,\n                y,\n                w,\n              });\n              lineGroup = new LineGroup(x, y);\n            }\n            x += item.outerWidth;\n            lineGroup.add(item);\n          }\n        }\n        else {\n          // block先处理之前可能的lineGroup\n          if(lineGroup.size) {\n            this.lineGroups.push(lineGroup);\n            lineGroup.verticalAlign();\n            y += lineGroup.height;\n            lineGroup = new LineGroup(data.x, y);\n          }\n          item.__preLay({\n            x: data.x,\n            y,\n            w,\n            h,\n          });\n          x = data.x;\n          y += item.outerHeight;\n        }\n      }\n      else if(item instanceof Geom) {\n        // 图形也是block先处理之前可能的行\n        if(lineGroup.size) {\n          this.lineGroups.push(lineGroup);\n          lineGroup.verticalAlign();\n          y += lineGroup.height;\n          lineGroup = new LineGroup(data.x, y);\n        }\n        item.__preLay({\n          x: data.x,\n          y,\n          w,\n        });\n        x = data.x;\n        y += item.outerHeight;\n      }\n      // 文字和inline类似\n      else {\n        // x开头，不用考虑是否放得下直接放\n        if(x === data.x) {\n          lineGroup.add(item);\n          item.__preLay({\n            x,\n            y,\n            w,\n            h,\n          });\n          x += item.width;\n        }\n        else {\n          // 非开头先尝试是否放得下\n          let fw = item.__tryLayInline(w - x);\n          // 放得下继续\n          if(fw >= 0) {\n            item.__preLay({\n              x,\n              y,\n              w,\n              h,\n            });\n          }\n          // 放不下处理之前的lineGroup，并重新开头\n          else {\n            this.lineGroups.push(lineGroup);\n            lineGroup.verticalAlign();\n            x = data.x;\n            y += lineGroup.height;\n            item.__preLay({\n              x: data.x,\n              y,\n              w,\n              h,\n            });\n            lineGroup = new LineGroup(x, y);\n          }\n          x += item.width;\n          lineGroup.add(item);\n        }\n      }\n    });\n    // 结束后处理可能遗留的最后的lineGroup\n    if(lineGroup.size) {\n      this.lineGroups.push(lineGroup);\n      lineGroup.verticalAlign();\n      y += lineGroup.height;\n    }\n    this.__width = w;\n    this.__height = fixedHeight ? h : y - data.y;\n  }\n\n  // 弹性布局时的计算位置\n  __preLayFlex(data) {\n    let { x, y, w, h } = data;\n    this.__x = x;\n    this.__y = y;\n    this.__width = w;\n    let { children, style } = this;\n    let {\n      width,\n      height,\n      flexDirection,\n      borderTopWidth,\n      borderRightWidth,\n      borderBottomWidth,\n      borderLeftWidth,\n      justifyContent,\n    } = style;\n    // 除了auto外都是固定高度\n    let fixedHeight;\n    if(width && width.unit !== unit.AUTO) {\n      switch(width.unit) {\n        case unit.PX:\n          w = width.value;\n          break;\n      }\n    }\n    if(height && height.unit !== unit.AUTO) {\n      fixedHeight = true;\n      switch(height.unit) {\n        case unit.PX:\n          h = height.value;\n          break;\n        case unit.PERCENT:\n          h *= height.value * 0.01;\n          break;\n      }\n    }\n    // border影响x和y和尺寸\n    x += borderLeftWidth.value;\n    data.x = x;\n    y += borderTopWidth.value;\n    data.y = y;\n    w -= borderLeftWidth.value + borderRightWidth.value;\n    h -= borderTopWidth.value + borderBottomWidth.value;\n    let isDirectionRow = flexDirection === 'row';\n    // column时height可能为auto，此时取消伸展，退化为类似block布局，但所有子元素强制block\n    if(!isDirectionRow && !fixedHeight) {\n      children.forEach(item => {\n        if(item instanceof Dom || item instanceof Geom) {\n          const { style, style: { display, flexDirection, width, height }} = item;\n          // column的flex的child如果是inline，变为block\n          if(display === 'inline') {\n            style.display = 'block';\n          }\n          // 竖向flex的child如果是横向flex，宽度自动的话要等同于父flex的宽度\n          else if(display === 'flex' && flexDirection === 'row' && width.unit === unit.AUTO) {\n            width.value = w;\n            width.unit = unit.PX;\n          }\n          item.__preLay({\n            x,\n            y,\n            w,\n            h,\n          });\n          y += item.outerHeight;\n        }\n        else {\n          item.__preLay({\n            x,\n            y,\n            w,\n            h,\n          });\n          y += item.outerHeight;\n        }\n      });\n      this.__width = w;\n      this.__height = y - data.y;\n      return;\n    }\n    // 计算伸缩基数\n    let growList = [];\n    let shrinkList = [];\n    let basisList = [];\n    let minList = [];\n    let growSum = 0;\n    let shrinkSum = 0;\n    let basisSum = 0;\n    let maxSum = 0;\n    children.forEach(item => {\n      if(item instanceof Dom || item instanceof Geom) {\n        let { flexGrow, flexShrink, flexBasis } = item.style;\n        growList.push(flexGrow);\n        shrinkList.push(flexShrink);\n        growSum += flexGrow;\n        shrinkSum += flexShrink;\n        let { b, min, max } = item.__calAutoBasis(isDirectionRow, w, h);\n        // 根据basis不同，计算方式不同\n        if(flexBasis.unit === unit.AUTO) {\n          basisList.push(max);\n          basisSum += max;\n        }\n        else if(flexBasis.unit === unit.PX) {\n          b = flexBasis.value;\n          basisList.push(b);\n          basisSum += b;\n        }\n        else if(flexBasis.unit === unit.PERCENT) {\n          b = (isDirectionRow ? w : h) * flexBasis.value;\n          basisList.push(b);\n          basisSum += b;\n        }\n        maxSum += max;\n        minList.push(min);\n      }\n      else {\n        growList.push(0);\n        shrinkList.push(1);\n        shrinkSum += 1;\n        if(isDirectionRow) {\n          basisList.push(item.textWidth);\n          basisSum += item.textWidth;\n          maxSum += item.textWidth;\n          minList.push(item.charWidth);\n        }\n        else {\n          item.__preLay({\n            x: 0,\n            y: 0,\n            w,\n            h,\n          }, true);\n          basisList.push(item.height);\n          basisSum += item.height;\n          maxSum += item.height;\n          minList.push(item.height);\n        }\n      }\n    });\n    let maxCross = 0;\n    let free = 0;\n    // 判断是否超出，决定使用grow还是shrink\n    let isOverflow = maxSum > (isDirectionRow ? w : h);\n    children.forEach((item, i) => {\n      let main;\n      let shrink = shrinkList[i];\n      let grow = growList[i];\n      // 计算主轴长度\n      if(isOverflow) {\n        let overflow = basisSum - (isDirectionRow ? w : h);\n        main = shrink ? (basisList[i] - overflow * shrink / shrinkSum) : basisList[i];\n      }\n      else {\n        free = (isDirectionRow ? w : h) - basisSum;\n        main = grow ? (basisList[i] + free * grow / growSum) : basisList[i];\n      }\n      // 主轴长度的最小值不能小于元素的最小长度，比如横向时的字符宽度\n      main = Math.max(main, minList[i]);\n      if(item instanceof Dom || item instanceof Geom) {\n        const { style, style: { display, flexDirection, width, height }} = item;\n        if(isDirectionRow) {\n          // row的flex的child如果是block，则等同于inline-block布局\n          if(display === 'block') {\n            style.display = 'inline';\n          }\n          // 横向flex的child如果是竖向flex，高度自动的话要等同于父flex的高度\n          else if(display === 'flex' && flexDirection === 'column' && fixedHeight && height.unit === unit.AUTO) {\n            height.value = h;\n            height.unit = unit.PX;\n          }\n          item.__preLay({\n            x,\n            y,\n            w: main,\n            h,\n          })\n        }\n        else {\n          // column的flex的child如果是inline，变为block\n          if(display === 'inline') {\n            style.display = 'block';\n          }\n          // 竖向flex的child如果是横向flex，宽度自动的话要等同于父flex的宽度\n          else if(display === 'flex' && flexDirection === 'row' && width.unit === unit.AUTO) {\n            width.value = w;\n            width.unit = unit.PX;\n          }\n          item.__preLay({\n            x,\n            y,\n            w,\n            h: main,\n          });\n        }\n        // 重设因伸缩而导致的主轴长度\n        if(isOverflow && shrink) {\n          if(isDirectionRow) {\n            item.__width = main;\n          }\n          else {\n            item.__height = main;\n          }\n        }\n        else if(!isOverflow && grow) {\n          if(isDirectionRow) {\n            item.__width = main;\n          }\n          else {\n            item.__height = main;\n          }\n        }\n      }\n      else {\n        item.__preLay({\n          x,\n          y,\n          w: isDirectionRow ? main : w,\n          h: isDirectionRow ? h : main,\n        });\n      }\n      if(isDirectionRow) {\n        x += item.outerWidth;\n        maxCross = Math.max(maxCross, item.outerHeight);\n      }\n      else {\n        y += item.outerHeight;\n        x = data.x;\n        maxCross = Math.max(maxCross, item.outerWidth);\n      }\n    });\n    // 主轴侧轴对齐方式\n    if(!isOverflow && growSum === 0 && free > 0) {\n      let len = children.length;\n      if(justifyContent === 'flex-end') {\n        for(let i = 0; i < len; i++) {\n          let child = children[i];\n          isDirectionRow ? child.__offsetX(free) : child.__offsetY(free);\n        }\n      }\n      else if(justifyContent === 'center') {\n        let center = free * 0.5;\n        for(let i = 0; i < len; i++) {\n          let child = children[i];\n          isDirectionRow ? child.__offsetX(center) : child.__offsetY(center);\n        }\n      }\n      else if(justifyContent === 'space-between') {\n        let between = free / (len - 1);\n        for(let i = 1; i < len; i++) {\n          let child = children[i];\n          isDirectionRow ? child.__offsetX(between * i) : child.__offsetY(between * i);\n        }\n      }\n      else if(justifyContent === 'space-around') {\n        let around = free / (len + 1);\n        for(let i = 0; i < len; i++) {\n          let child = children[i];\n          isDirectionRow ? child.__offsetX(around * (i + 1)) : child.__offsetY(around * (i + 1));\n        }\n      }\n    }\n    // 子元素侧轴伸展\n    if(isDirectionRow) {\n      // 父元素固定高度，子元素可能超过，侧轴最大长度取固定高度\n      if(fixedHeight) {\n        maxCross = h;\n      }\n      y += maxCross;\n    }\n    // 所有短侧轴的children伸张侧轴长度至相同，超过的不动，固定宽高的也不动\n    children.forEach(item => {\n      let { style } = item;\n      if(isDirectionRow) {\n        if(item.style.height.unit === unit.AUTO) {\n          item.__height = maxCross - style.borderTopWidth.value - style.borderBottomWidth.value;\n        }\n      }\n      else {\n        if(item.style.width.unit === unit.AUTO) {\n          item.__width = maxCross - style.borderRightWidth.value - style.borderLeftWidth.value;\n        }\n      }\n    });\n    this.__width = w;\n    this.__height = fixedHeight ? h : y - data.y;\n  }\n\n  // inline比较特殊，先简单顶部对其，后续还需根据vertical和lineHeight计算y偏移\n  __preLayInline(data) {\n    let { x, y, w, h } = data;\n    this.__x = x;\n    this.__y = y;\n    let maxX = x;\n    let { children, style } = this;\n    let {\n      width,\n      height,\n      borderTopWidth,\n      borderRightWidth,\n      borderBottomWidth,\n      borderLeftWidth,\n    } = style;\n    // 除了auto外都是固定高度\n    let fixedWidth;\n    let fixedHeight;\n    if(width && width.unit !== unit.AUTO) {\n      fixedWidth = true;\n      switch(width.unit) {\n        case unit.PX:\n          w = width.value;\n          break;\n      }\n    }\n    if(height && height.unit !== unit.AUTO) {\n      fixedHeight = true;\n      switch(height.unit) {\n        case unit.PX:\n          h = height.value;\n          break;\n      }\n    }\n    // border影响x和y\n    x += borderLeftWidth.value;\n    data.x = x;\n    y += borderTopWidth.value;\n    data.y = y;\n    w -= borderLeftWidth.value + borderRightWidth.value;\n    h -= borderTopWidth.value + borderBottomWidth.value;\n    // 递归布局，将inline的节点组成lineGroup一行\n    let lineGroup = new LineGroup(x, y);\n    children.forEach(item => {\n      if(item instanceof Dom) {\n        // inline开头，不用考虑是否放得下直接放\n        if(x === data.x) {\n          lineGroup.add(item);\n          item.__preLayInline({\n            x,\n            y,\n            w,\n          });\n          x += item.outerWidth;\n          maxX = Math.max(maxX, x);\n        }\n        else {\n          // 非开头先尝试是否放得下\n          let fw = item.__tryLayInline(w - x);\n          // 放得下继续\n          if(fw >= 0) {\n            item.__preLayInline({\n              x,\n              y,\n              w,\n            });\n          }\n          // 放不下处理之前的lineGroup，并重新开头\n          else {\n            this.lineGroups.push(lineGroup);\n            lineGroup.verticalAlign();\n            x = data.x;\n            y += lineGroup.height;\n            item.__preLayInline({\n              x: data.x,\n              y,\n              w,\n            });\n            lineGroup = new LineGroup(x, y);\n          }\n          x += item.outerWidth;\n          maxX = Math.max(maxX, x);\n          lineGroup.add(item);\n        }\n      }\n      // inline里的其它只有文本\n      else {\n        if(x === data.x) {\n          lineGroup.add(item);\n          item.__preLay({\n            x,\n            y,\n            w,\n            h,\n          });\n          x += item.width;\n          maxX = Math.max(maxX, x);\n        }\n        else {\n          // 非开头先尝试是否放得下\n          let fw = item.__tryLayInline(w - x);\n          // 放得下继续\n          if(fw >= 0) {\n            item.__preLay({\n              x,\n              y,\n              w,\n              h,\n            });\n          }\n          // 放不下处理之前的lineGroup，并重新开头\n          else {\n            this.lineGroups.push(lineGroup);\n            lineGroup.verticalAlign();\n            x = data.x;\n            y += lineGroup.height;\n            item.__preLay({\n              x: data.x,\n              y,\n              w,\n              h,\n            });\n            lineGroup = new LineGroup(x, y);\n          }\n          x += item.width;\n          maxX = Math.max(maxX, x);\n          lineGroup.add(item);\n        }\n      }\n    });\n    // 结束后处理可能遗留的最后的lineGroup，children为空时可能size为空\n    if(lineGroup.size) {\n      this.lineGroups.push(lineGroup);\n      lineGroup.verticalAlign();\n      y += lineGroup.height;\n    }\n    // 元素的width不能超过父元素w\n    this.__width = fixedWidth ? w : maxX - data.x;\n    this.__height = fixedHeight ? h : y - data.y;\n  }\n\n  render() {\n    let { ctx, style, children, x, y, width, height } = this;\n    let {\n      backgroundColor,\n      borderTopWidth,\n      borderTopColor,\n      borderRightWidth,\n      borderRightColor,\n      borderBottomWidth,\n      borderBottomColor,\n      borderLeftWidth,\n      borderLeftColor,\n    } = style;\n    if(backgroundColor) {\n      ctx.beginPath();\n      ctx.fillStyle = backgroundColor;\n      ctx.rect(this.x, this.y, this.width, this.height);\n      ctx.fill();\n      ctx.closePath();\n    }\n    if(borderTopWidth.value) {\n      ctx.beginPath();\n      ctx.lineWidth = borderTopWidth.value;\n      ctx.strokeStyle = borderTopColor;\n      let y2 = y + borderTopWidth.value * 0.5;\n      ctx.moveTo(x + borderLeftWidth.value, y2);\n      ctx.lineTo(x + borderLeftWidth.value + width, y2);\n      ctx.stroke();\n      ctx.closePath();\n    }\n    if(borderRightWidth.value) {\n      ctx.beginPath();\n      ctx.lineWidth = borderRightWidth.value;\n      ctx.strokeStyle = borderRightColor;\n      let x2 = x + width + borderLeftWidth.value + borderRightWidth.value * 0.5;\n      ctx.moveTo(x2, y);\n      ctx.lineTo(x2, y + height + borderTopWidth.value + borderBottomWidth.value);\n      ctx.stroke();\n      ctx.closePath();\n    }\n    if(borderBottomWidth.value) {\n      ctx.beginPath();\n      ctx.lineWidth = borderBottomWidth.value;\n      ctx.strokeStyle = borderBottomColor;\n      let y2 = y + height + borderTopWidth.value + borderBottomWidth.value * 0.5;\n      ctx.moveTo(x + borderLeftWidth.value, y2);\n      ctx.lineTo(x + borderLeftWidth.value + width, y2);\n      ctx.stroke();\n      ctx.closePath();\n    }\n    if(borderLeftWidth.value) {\n      ctx.beginPath();\n      ctx.lineWidth = borderLeftWidth.value;\n      ctx.strokeStyle = borderLeftColor;\n      ctx.moveTo(x + borderLeftWidth.value * 0.5, y);\n      ctx.lineTo(x + borderLeftWidth.value * 0.5, y + height + borderTopWidth.value + borderBottomWidth.value);\n      ctx.stroke();\n      ctx.closePath();\n    }\n    children.forEach(item => {\n      if(item) {\n        item.render();\n      }\n    });\n  }\n\n  get tagName() {\n    return this.__tagName;\n  }\n  get children() {\n    return this.__children;\n  }\n  get lineGroups() {\n    return this.__lineGroups;\n  }\n  get baseLine() {\n    let len = this.lineGroups.length;\n    if(len) {\n      let last = this.lineGroups[len - 1];\n      return last.y - this.y + last.baseLine;\n    }\n    return this.y;\n  }\n  get outerWidth() {\n    let { style: { borderLeftWidth, borderRightWidth } } = this;\n    return this.width + borderLeftWidth.value + borderRightWidth.value;\n  }\n  get outerHeight() {\n    let { style: { borderTopWidth, borderBottomWidth } } = this;\n    return this.height + borderTopWidth.value + borderBottomWidth.value;\n  }\n\n  static isValid(s) {\n    return TAG_NAME.hasOwnProperty(s);\n  }\n}\n\nexport default Dom;\n","import Dom from './Dom';\nimport util from '../util';\n\nfunction getDom(dom) {\n  if(util.isString(dom)) {\n    let o = document.querySelector(dom);\n    if(!o) {\n      throw new Error('can not find dom of selector: ' + dom);\n    }\n    return o;\n  }\n  if(!dom) {\n    throw new Error('can not find dom: ' + dom);\n  }\n  return dom;\n}\n\nfunction renderProp(k, v) {\n  let s = Array.isArray(v) ? util.joinSourceArray(v) : util.stringify(v);\n  if(k === 'className') {\n    k = 'class';\n  }\n  return ' ' + k + '=\"' + util.encodeHtml(s, true) + '\"';\n}\n\nclass Canvas extends Dom {\n  constructor(props, children) {\n    super('canvas', props, children);\n    this.__node = null; // 真实DOM引用\n  }\n  initProps() {\n    if(this.props.width !== undefined) {\n      let value = parseInt(this.props.width);\n      if(!isNaN(value) && value > 0) {\n        this.__width = value;\n      }\n    }\n    if(this.props.height !== undefined) {\n      let value = parseInt(this.props.height);\n      if(!isNaN(value) && value > 0) {\n        this.__height = value;\n      }\n    }\n  }\n  genHtml() {\n    let res = '<canvas';\n    // 拼接处理属性\n    for(let i = 0, len = this.__props.length; i < len; i++) {\n      let item = this.__props[i];\n      res += renderProp(item[0], item[1]);\n    }\n    res += '></canvas>';\n    return res;\n  }\n  appendTo(dom) {\n    dom = getDom(dom);\n    this.initProps();\n    // 已有canvas节点\n    if(dom.nodeName.toUpperCase() === 'CANVAS') {\n      this.__node = dom;\n      if(this.width) {\n        dom.setAttribute('width', this.width);\n      }\n      if(this.height) {\n        dom.setAttribute('height', this.height);\n      }\n    }\n    // 没有canvas节点则生成一个新的\n    else {\n      let s = this.genHtml();\n      dom.insertAdjacentHTML('beforeend', s);\n      let canvas = dom.querySelectorAll('canvas');\n      this.__node = canvas[canvas.length - 1];\n    }\n    // 没有设置width/height则采用css计算形式\n    if(!this.width || !this.height) {\n      let css = window.getComputedStyle(dom, null);\n      if(!this.width) {\n        this.__width = parseInt(css.getPropertyValue('width'));\n        dom.setAttribute('width', this.width);\n      }\n      if(!this.height) {\n        this.__height = parseInt(css.getPropertyValue('height'));\n        dom.setAttribute('height', this.height);\n      }\n    }\n    // canvas作为根节点一定是block或flex，不会是inline\n    let { style } = this;\n    if(['flex', 'block', 'none'].indexOf(style.display) === -1) {\n      style.display = 'block';\n    }\n    this.__ctx = this.__node.getContext('2d');\n    this.__traverse(this.__ctx);\n    // canvas的宽高固定初始化\n    style.width = this.width;\n    style.height = this.height;\n    this.__initStyle();\n    this.__preLay({\n      x: 0,\n      y: 0,\n      w: this.width,\n      h: this.height,\n    });\n    this.render();\n  }\n\n  get node() {\n    return this.__node;\n  }\n}\n\nexport default Canvas;\n","import Geom from './Geom';\n\nclass Line extends Geom {\n  constructor(props) {\n    super(props);\n    this.__tagName = '$line';\n    this.__start = [0, 0];\n    this.__end = [1, 1];\n    if(Array.isArray(this.props.start)) {\n      this.__start = this.props.start;\n    }\n    if(Array.isArray(this.props.end)) {\n      this.__end = this.props.end;\n    }\n  }\n\n  render() {\n    super.render();\n    let { x, y, width, height, style, ctx, start, end } = this;\n    let {\n      borderTopWidth,\n      borderLeftWidth,\n      stroke,\n      strokeWidth,\n    } = style;\n    let originX = x + borderLeftWidth.value;\n    let originY = y + borderTopWidth.value;\n    ctx.strokeStyle = stroke;\n    ctx.lineWidth = strokeWidth;\n    ctx.beginPath();\n    ctx.moveTo(originX + start[0] * width, originY + start[1] * height);\n    ctx.lineTo(originX + end[0] * width, originY + end[1] * height);\n    ctx.stroke();\n    ctx.closePath();\n  }\n\n  get start() {\n    return this.__start;\n  }\n  get end() {\n    return this.__end;\n  }\n}\n\nexport default Line;\n","import Geom from './Geom';\n\nclass Polygon extends Geom {\n  constructor(props) {\n    super(props);\n    this.__tagName = '$polygon';\n    this.__pointList = [];\n    if(Array.isArray(this.props.pointList)) {\n      this.__pointList = this.props.pointList;\n    }\n  }\n\n  render() {\n    super.render();\n    let { x, y, width, height, style, ctx, pointList } = this;\n    let {\n      borderTopWidth,\n      borderLeftWidth,\n      stroke,\n      strokeWidth,\n    } = style;\n    let originX = x + borderLeftWidth.value;\n    let originY = y + borderTopWidth.value;\n    ctx.strokeStyle = stroke;\n    ctx.lineWidth = strokeWidth;\n    ctx.beginPath();\n    ctx.moveTo(originX + pointList[0][0] * width, originY + pointList[0][1] * height);\n    for(let i = 1, len = pointList.length; i < len; i++) {\n      let point = pointList[i];\n      ctx.lineTo(originX + point[0] * width, originY + point[1] * height);\n    }\n    ctx.stroke();\n    ctx.closePath();\n  }\n\n  get pointList() {\n    return this.__pointList;\n  }\n}\n\nexport default Polygon;\n","import Dom from './node/Dom';\nimport Canvas from './node/Canvas';\nimport Geom from './geom/Geom';\nimport Line from './geom/Line';\nimport Polygon from './geom/Polygon';\n\nlet karas = {\n  render(canvas, dom) {\n    if(!canvas instanceof Canvas) {\n      throw new Error('render root muse be canvas');\n    }\n    if(dom) {\n      canvas.appendTo(dom);\n    }\n    return canvas;\n  },\n  createVd(tagName, props, children) {\n    if(tagName === 'canvas') {\n      return new Canvas(props, children);\n    }\n    if(Dom.isValid(tagName)) {\n      return new Dom(tagName, props, children);\n    }\n    throw new Error('can not use marker: ' + tagName);\n  },\n  createGm(tagName, props) {\n    if(Geom.isValid(tagName)) {\n      switch(tagName) {\n        case '$line':\n          return new Line(props);\n        case '$polygon':\n          return new Polygon(props);\n      }\n    }\n    throw new Error('can not use geom marker: ' + tagName);\n  },\n  createCp(tagName, props, children) {},\n};\n\nif(typeof window != 'undefined') {\n  window.karas = karas;\n}\n\nexport default karas;\n"],"names":["Node","props","Array","isArray","arr","hash","i","len","length","item","list","Object","keys","j","k","arr2hash","__props","temp","push","splice","spread","hash2arr","__x","__y","__width","__height","__prev","__next","__ctx","__parent","__style","this","style","__baseLine","lhr","car","blr","mdr","lgr","RESET","display","borderSizing","marginTop","marginRight","marginBottom","marginLeft","paddingTop","paddingRight","paddingBottom","paddingLeft","fontSize","fontFamily","color","fontStyle","fontWeight","lineHeight","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","borderTopStyle","borderRightStyle","borderBottomStyle","borderLeftStyle","verticalAlign","width","height","flexGrow","flexShrink","flexBasis","flexDirection","justifyContent","alignItem","textAlign","stroke","strokeWidth","reset","forEach","v","toString","isType","type","obj","call","isNumber","stringify","s","isNil","util","isObject","isString","isFunction","isBoolean","isDate","joinSourceArray","res","encodeHtml","prop","replace","parserOneBorder","direction","key","w","exec","c","indexOf","normalize","hasOwnProperty","background","bgc","backgroundColor","flex","test","parseFloat","border","borderTop","borderRight","borderBottom","borderLeft","unit","value","Math","max","font","setFontStyle","getBaseLine","normal","LineBox","ctx","x","y","content","__content","fillStyle","fillText","css","diff","CHAR_WIDTH_CACHE","Text","__lineBoxes","__charWidthList","__charWidth","__textWidth","charWidthList","cache","sum","char","charAt","mw","measureText","charWidth","data","isVirtual","h","maxX","lineBoxes","begin","count","lineBox","slice","render","__offsetX","__offsetY","n","textWidth","min","last","baseLine","LineGroup","__list","__calHeight","__calBaseLine","_this","TAG_NAME","Geom","isDirectionRow","b","main","__preLayBlock","__preLayFlex","__preLayInline","fixedWidth","fixedHeight","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","beginPath","rect","fill","closePath","lineWidth","strokeStyle","y2","moveTo","lineTo","x2","__tagName","INLINE","Dom","tagName","children","__children","__lineGroups","__traverseChildren","prev","parent","Error","_this2","_this3","__traverse","parentStyle","__initStyle","__measure","__tryLayInline","isRecursion","__calAutoBasis","b2","min2","max2","__preLay","lineGroup","add","outerWidth","_this4","lineGroups","size","outerHeight","growList","shrinkList","basisList","minList","growSum","shrinkSum","basisSum","maxSum","maxCross","free","isOverflow","shrink","grow","overflow","child","center","between","around","_this5","Canvas","__node","undefined","parseInt","isNaN","dom","o","document","querySelector","getDom","initProps","nodeName","toUpperCase","setAttribute","genHtml","insertAdjacentHTML","canvas","querySelectorAll","window","getComputedStyle","getPropertyValue","getContext","Line","__start","__end","start","end","originX","originY","Polygon","__pointList","pointList","point","karas","appendTo","createVd","isValid","createGm","createCp"],"mappings":"s6CAyCMA,wBACQC,aACVA,EAAQA,GAAS,GAEdC,MAAMC,QAAQF,SACVA,MA9CX,SAAkBG,WACZC,EAAO,GACHC,EAAI,EAAGC,EAAMH,EAAII,OAAQF,EAAIC,EAAKD,IAAK,KACzCG,EAAOL,EAAIE,MACZJ,MAAMC,QAAQM,GACfJ,EAAKI,EAAK,IAAMA,EAAK,YAGjB,IAAIC,EAAOC,OAAOC,KAAKH,GAAOI,EAAIH,EAAKF,OAAS,EAAQ,GAALK,EAAQA,IAAK,KAC9DC,EAAIJ,EAAKG,GACbR,EAAKS,GAAKL,EAAKK,WAIdT,EAgCUU,CAASd,QACjBe,QArBX,SAAgBZ,OACV,IAAIE,EAAI,EAAGC,EAAMH,EAAII,OAAQF,EAAIC,EAAKD,IAAK,KACzCG,EAAOL,EAAIE,OACXJ,MAAMC,QAAQM,GAAO,SACnBQ,EAAO,GACHP,EAAOC,OAAOC,KAAKH,GAAOI,EAAI,EAAGN,EAAMG,EAAKF,OAAQK,EAAIN,EAAKM,IAAK,KACpEC,EAAIJ,EAAKG,GACbI,EAAKC,KAAK,CAACJ,EAAGL,EAAKK,KAErBV,EAAIe,aAAJf,GAAWE,EAAG,UAAMW,YAGjBb,EASYgB,CAAOnB,UAGjBA,MAAQA,OACRe,QAlCX,SAAkBX,WACZD,EAAM,GACFM,EAAOC,OAAOC,KAAKP,GAAOC,EAAI,EAAGC,EAAMG,EAAKF,OAAQF,EAAIC,EAAKD,IAAK,KACpEQ,EAAIJ,EAAKJ,GACbF,EAAIc,KAAK,CAACJ,EAAGT,EAAKS,YAEbV,EA4BYiB,CAASpB,SAErBqB,IAAM,OACNC,IAAM,OACNC,QAAU,OACVC,SAAW,OACXC,OAAS,UACTC,OAAS,UACTC,MAAQ,UACRC,SAAW,UACXC,QAAUC,KAAK9B,MAAM+B,OAAS,QAC9BC,WAAa,6CAIXF,KAAKT,qCAGLS,KAAKR,yCAGLQ,KAAKP,8CAGLO,KAAKN,6CAGLM,KAAKL,2CAGLK,KAAKJ,6CAGLI,KAAKF,8CAGLE,KAAKD,2CAGLC,KAAKH,8CAGLG,KAAKE,sBC5FR,IACF,IACK,ICAF,CACLC,IAAK,cACLC,IAAK,UACLC,IAAK,YACLC,IAAK,aACLC,IAAK,cCRHC,EAAQ,CACZC,QAAS,QACTC,aAAc,cACdC,UAAW,EACXC,YAAa,EACbC,aAAc,EACdC,WAAY,EACZC,WAAY,EACZC,aAAc,EACdC,cAAe,EACfC,YAAa,EACbC,SAAU,GACVC,WAAY,QACZC,MAAO,OACPC,UAAW,SACXC,WAAY,IACZC,WAAY,SACZC,eAAgB,EAChBC,iBAAkB,EAClBC,kBAAmB,EACnBC,gBAAiB,EACjBC,eAAgB,QAChBC,iBAAkB,QAClBC,kBAAmB,QACnBC,gBAAiB,QACjBC,cAAe,WACfC,MAAO,OACPC,OAAQ,OACRC,SAAU,EACVC,WAAY,EACZC,UAAW,OACXC,cAAe,MACfC,eAAgB,aAChBC,UAAW,UACXC,UAAW,OACXC,OAAQ,OACRC,YAAa,GAGXC,EAAQ,GAEZjE,OAAOC,KAAK2B,GAAOsC,QAAQ,SAAA/D,OACrBgE,EAAIvC,EAAMzB,GACd8D,EAAM1D,KAAK,CACTJ,EAAAA,EACAgE,EAAAA,MC7CJ,IAAIC,EAAW,GAAGA,SAClB,SAASC,EAAOC,UACP,SAASC,UACPH,EAASI,KAAKD,KAAS,WAAaD,EAAO,KAItD,IAAIG,EAAWJ,EAAO,UAgBtB,SAASK,EAAUC,UACdC,EAAMD,GACA,GAEFA,EAAEP,WAUX,SAASQ,EAAMT,UACNA,MAAAA,EAGT,IAAIU,EAAO,CACTC,SAAUT,EAAO,UACjBU,SAAUV,EAAO,UACjBW,WAAYX,EAAO,YACnBI,SAAAA,EACAQ,UAAWZ,EAAO,WAClBa,OAAQb,EAAO,QACfK,UAAAA,EACAS,yBAAgB1F,UAxClB,SAAS0F,EAAgB1F,WACnB2F,EAAM,GACFzF,EAAI,EAAGC,EAAMH,EAAII,OAAQF,EAAIC,EAAKD,IAAK,KACzCG,EAAOL,EAAIE,GACZJ,MAAMC,QAAQM,GACfsF,GAAOD,EAAgBrF,GAGvBsF,GAAOV,EAAU5E,UAGdsF,EA8BED,CAAgB1F,IAEzB4F,WAtBF,SAAoBV,EAAGW,UAClBA,EACMX,EAAEY,QAAQ,KAAM,UAElBZ,EAAEY,QAAQ,KAAM,SAASA,QAAQ,KAAM,SAmB9CX,MAAAA,GChDF,SAASY,EAAgBnE,EAAOoE,OAC1BC,kBAAeD,MACfpE,EAAMqE,QAGNC,EAAI,aAAaC,KAAKvE,EAAMqE,IAC7BC,IACDtE,EAAMqE,EAAM,SAAWC,EAAE,QAEvBhB,EAAI,aAAaiB,KAAKvE,EAAMqE,IAC7Bf,IACDtD,EAAMqE,EAAM,SAAWf,EAAE,QAEvBkB,EAAI,kBAAkBD,KAAKvE,EAAMqE,IAClCG,IAAoC,EAA/B,CAAC,EAAG,GAAGC,QAAQD,EAAE,GAAGhG,UAC1BwB,EAAMqE,EAAM,SAAWG,EAAE,WAkJd,CACbE,UA/IF,SAAmB1E,MAEjB4C,EAAMC,QAAQ,SAAApE,GACRuB,EAAM2E,eAAelG,EAAKK,KAC5BkB,EAAMvB,EAAKK,GAAKL,EAAKqE,KAKtB9C,EAAM4E,WAAY,KACfC,EAAM,kBAAkBN,KAAKvE,EAAM4E,YACpCC,IAAwC,EAAjC,CAAC,EAAG,GAAGJ,QAAQI,EAAI,GAAGrG,UAC9BwB,EAAM8E,gBAAkBD,EAAI,IAG7B7E,EAAM+E,OACW,SAAf/E,EAAM+E,MACP/E,EAAMmC,SAAW,EACjBnC,EAAMoC,WAAa,EACnBpC,EAAMqC,UAAY,QAEG,SAAfrC,EAAM+E,MACZ/E,EAAMmC,SAAW,EACjBnC,EAAMoC,WAAa,EACnBpC,EAAMqC,UAAY,QAEZ,WAAW2C,KAAKhF,EAAM+E,OAC5B/E,EAAMmC,SAAW8C,WAAWjF,EAAM+E,MAClC/E,EAAMoC,WAAa,EACnBpC,EAAMqC,UAAY,GAEZ,aAAa2C,KAAKhF,EAAM+E,OACxB,YAAYC,KAAKhF,EAAM+E,QAE7B/E,EAAMmC,SAAW,EACjBnC,EAAMoC,WAAa,EACnBpC,EAAMqC,UAAY,SAGnBrC,EAAMkF,SACPlF,EAAMmF,UAAYnF,EAAMoF,YAAcpF,EAAMqF,aAAerF,EAAMsF,WAAatF,EAAMkF,QAEtFf,EAAgBnE,EAAO,OACvBmE,EAAgBnE,EAAO,SACvBmE,EAAgBnE,EAAO,UACvBmE,EAAgBnE,EAAO,SAGrB,YACA,cACA,aACA,aACA,aACA,eACA,cACA,cACA,iBACA,mBACA,oBACA,kBACA,QACA,SACA,aACA6C,QAAQ,SAAA/D,OACJgE,EAAI9C,EAAMlB,IAEV0E,EAAKD,MAAMT,IAAMA,EAAEyC,OAGd,SAANzC,EACD9C,EAAMlB,GAAK,CACTyG,KAAMA,GAGF,KAAKP,KAAKlC,IAChBA,EAAImC,WAAWnC,IAAM,EAEnB9C,EAAMlB,GADLgE,GAAK,EACK,CACT0C,MAAO,EACPD,KAAMA,GAIG,CACTC,MAAO1C,EACPyC,KAAMA,KAKVzC,EAAImC,WAAWnC,IAAM,EACrB9C,EAAMlB,GAAK,CACT0G,MAAOC,KAAKC,IAAI5C,EAAG,GACnByC,KAAMA,WAKRhE,EAAavB,EAAMuB,WAErBA,EADgB,WAAfA,EACY,CACXiE,MAAOxF,EAAMkB,SAAWyE,EAAWzF,IACnCqF,KAAMA,GAGF,MAAMP,KAAKzD,IACjBA,EAAa0D,WAAW1D,GACX,CACXiE,MAAOC,KAAKC,IAAI1F,EAAMkB,SAAUK,GAChCgE,KAAMA,IAOU,YAFlBhE,EAAa0D,WAAW1D,IAAe,UAGxB,CACXiE,MAAOxF,EAAMkB,SAAWyE,EAAWzF,IACnCqF,KAAMA,GAIK,CACXC,MAAOjE,EAAavB,EAAMkB,SAC1BqE,KAAMA,GAIZvF,EAAMuB,WAAaA,GAenBqE,aAZF,SAAsB5F,OACdqB,EAAgDrB,EAAhDqB,UAAWC,EAAqCtB,EAArCsB,WAAYJ,EAAyBlB,EAAzBkB,SAAUC,EAAenB,EAAfmB,2BAC7BE,cAAaC,cAAcJ,gBAAcA,gBAAcC,IAWjE0E,YARF,SAAqB7F,OACf8F,EAAS9F,EAAMkB,SAAWyE,EAAWzF,UACE,IAAnCF,EAAMuB,WAAWiE,MAAQM,GAAgB9F,EAAMkB,SAAWyE,EAAWvF,MCjKzE2F,wBACQC,EAAKC,EAAGC,EAAGC,EAASnG,kBACzBJ,MAAQoG,OACR1G,IAAM2G,OACN1G,IAAM2G,OACNE,UAAYD,OACZrG,QAAUE,kDAIVgG,IAAIK,UAAYtG,KAAKC,MAAMoB,WAC3B4E,IAAIM,SAASvG,KAAKoG,QAASpG,KAAKkG,EAAGlG,KAAKmG,EAAIK,EAAIV,YAAY9F,KAAKC,0CAG9DwG,QACHlH,KAAOkH,oCAGJA,QACHjH,KAAOiH,qCAILzG,KAAKH,uCAGLG,KAAKT,qCAGLS,KAAKR,2CAGLQ,KAAKqG,+CAGLrG,KAAKD,gDAGLyG,EAAIV,YAAY9F,KAAKC,gBCpC1ByG,EAAmB,GAEnBC,wBACQP,sDAELC,UAAYD,EAAQpD,aACpB4D,YAAc,KACdC,gBAAkB,KAClBC,YAAc,IACdC,YAAc,eAPJ9I,+CAYV4I,gBAAkB,OACjBZ,EAAuCjG,KAAvCiG,IAAKG,EAAkCpG,KAAlCoG,QAASnG,EAAyBD,KAAzBC,MAAO+G,EAAkBhH,KAAlBgH,cAC3Bf,EAAIL,KAAOY,EAAIX,aAAa5F,WACxBgH,EAAQP,EAAiBzG,EAAMkB,UAAYuF,EAAiBzG,EAAMkB,WAAa,GAC/E1C,EAAS2H,EAAQ3H,OACjByI,EAAM,EACF3I,EAAI,EAAGA,EAAIE,EAAQF,IAAK,KAC1B4I,EAAOf,EAAQgB,OAAO7I,GACtB8I,EAAKJ,EAAMrC,eAAeuC,GAAQF,EAAME,GAAQlB,EAAIqB,YAAYH,GAAMjF,MAC1E8E,EAAc7H,KAAKkI,GACnBH,GAAOG,OACFP,YAAcpB,KAAKC,IAAI3F,KAAKuH,UAAWF,QAEzCN,YAAcG,mCAGZM,EAAMC,OACPvB,EAAesB,EAAftB,EAAGC,EAAYqB,EAAZrB,EAAG5B,EAASiD,EAATjD,EAASiD,EAANE,OACVnI,IAAM2G,OACN1G,IAAM2G,UACPwB,EAAOzB,EACLD,EAAkDjG,KAAlDiG,IAAKG,EAA6CpG,KAA7CoG,QAASnG,EAAoCD,KAApCC,MAAO2H,EAA6B5H,KAA7B4H,UAAWZ,EAAkBhH,KAAlBgH,cAElCa,EAAQ,EACRtJ,EAAI,EACJuJ,EAAQ,EACRrJ,EAAS2H,EAAQ3H,OACfF,EAAIE,OACRqJ,GAASd,EAAczI,MACTgG,EAAG,KACXwD,EAAU,IAAI/B,EAAQC,EAAKC,EAAGC,EAAGC,EAAQ4B,MAAMH,EAAOtJ,EAAI,GAAI0B,GAClE2H,EAAUzI,KAAK4I,GACfJ,EAAOjC,KAAKC,IAAIgC,EAAMzB,EAAI4B,GAC1B3B,GAAKnG,KAAKC,MAAMuB,WAAWiE,MAE3BlH,GADAsJ,EAAQtJ,EAAI,GACA,EACZuJ,EAAQ,OAEL,GAAYvD,EAARuD,EAAW,CAEfvJ,IAAMsJ,IACPtJ,EAAIsJ,EAAQ,OAEVE,EAAU,IAAI/B,EAAQC,EAAKC,EAAGC,EAAGC,EAAQ4B,MAAMH,EAAOtJ,GAAI0B,GAC9D2H,EAAUzI,KAAK4I,GACfJ,EAAOjC,KAAKC,IAAIgC,EAAMzB,EAAI4B,EAAQd,EAAczI,IAChD4H,GAAKnG,KAAKC,MAAMuB,WAAWiE,MAC3BoC,EAAQtJ,EACRA,GAAQ,EACRuJ,EAAQ,OAGRvJ,OAGDsJ,EAAQpJ,GAAUoJ,EAAQtJ,EAAG,KAC1BwJ,EAAU,IAAI/B,EAAQC,EAAKC,EAAGC,EAAGC,EAAQ4B,MAAMH,EAAOtJ,GAAI0B,GAC9D2H,EAAUzI,KAAK4I,GACfJ,EAAOjC,KAAKC,IAAIgC,EAAMzB,EAAI4B,GAC1B3B,GAAKnG,KAAKC,MAAMuB,WAAWiE,WAExBhG,QAAUkI,EAAOzB,OACjBxG,SAAWyG,EAAIqB,EAAKrB,EACtBsB,SACIb,YAAc,0CAKhBX,IAAIL,KAAOY,EAAIX,aAAa7F,KAAKC,YACjC2H,UAAU9E,QAAQ,SAAApE,GACrBA,EAAKuJ,kDAIM1D,eACR0B,IAAIL,KAAOY,EAAIX,aAAa7F,KAAKC,OAE/BsE,EADEvE,KAAKiG,IAAIqB,YAAYtH,KAAKoG,SAASlE,wCAIpCuE,QACHlH,KAAOkH,OACPmB,UAAU9E,QAAQ,SAAApE,GACrBA,EAAKwJ,UAAUzB,uCAITA,QACHjH,KAAOiH,OACPmB,UAAU9E,QAAQ,SAAApE,GACrBA,EAAKyJ,UAAU1B,uDAKb2B,EAAI,cACHpB,cAAclE,QAAQ,SAAApE,GACzB0J,EAAI1C,KAAKC,IAAIyC,EAAG1J,KAEX,CAAEiH,IAAK3F,KAAKqI,UAAWC,IAAKF,0CAI5BpI,KAAKqG,wBAEFtD,QACLsD,UAAYtD,2CAGV/C,KAAK4G,yDAGL5G,KAAK6G,yDAGL7G,KAAK8G,qDAGL9G,KAAK+G,iDAGRwB,EAAOvI,KAAK4H,UAAU5H,KAAK4H,UAAUnJ,OAAS,UAC3C8J,EAAKpC,EAAInG,KAAKmG,EAAIoC,EAAKC,mDAGvBxI,KAAKP,mDAGLO,KAAKN,kBCnJV+I,wBACQvC,EAAGC,kBACRuC,OAAS,QACTnJ,IAAM2G,OACN1G,IAAM2G,OACNzG,SAAW,OACXQ,WAAa,wCAGhBxB,QACGC,KAAKQ,KAAKT,+CAIX8J,EAAW,cACV7J,KAAKmE,QAAQ,SAAApE,GAChB8J,EAAW9C,KAAKC,IAAI6C,EAAU9J,EAAK8J,YAE9BA,4CAIHrG,EAAS,cACRxD,KAAKmE,QAAQ,SAAApE,GAChByD,EAASuD,KAAKC,IAAIxD,EAAQzD,EAAKyD,UAE1BA,0DAIFzC,SAAWM,KAAK2I,mBAChBzI,WAAaF,KAAK4I,gBAED,EAAnB5I,KAAKrB,KAAKF,aACNE,KAAKmE,QAAQ,SAAApE,GACbA,EAAK8J,WAAaK,EAAKL,UACxB9J,EAAKyJ,UAAUU,EAAKL,SAAW9J,EAAK8J,gDAOnCxI,KAAK0I,wCAGL1I,KAAKT,qCAGLS,KAAKR,0CAGLQ,KAAKN,iDAGLM,KAAKE,+CAGLF,KAAK0I,OAAOjK,gBCtDjBqK,EAAW,QACN,YACG,GAGRC,wBACQ7K,0CACJA,eAFSD,4CAMfuI,EAAI7B,UAAU3E,KAAKC,8CAGN+I,EAAgBzE,EAAGmD,OAC5BuB,EAAI,EACJX,EAAM,EACN3C,EAAM,EACJ1F,EAAUD,KAAVC,MAGJiC,EAMEjC,EANFiC,MACAC,EAKElC,EALFkC,OACAV,EAIExB,EAJFwB,eACAC,EAGEzB,EAHFyB,iBACAC,EAEE1B,EAFF0B,kBACAC,EACE3B,EADF2B,gBAEEsH,EAAOF,EAAiB9G,EAAQC,KACjC+G,EAAK1D,OAASA,IACfyD,EAAItD,GAAOuD,EAAKzD,OAGfuD,EAAgB,KACbzE,EAAI7C,EAAiB+D,MAAQ7D,EAAgB6D,MACjDwD,GAAK1E,EACLoB,GAAOpB,EACP+D,GAAO/D,MAEJ,KACCmD,EAAIjG,EAAegE,MAAQ9D,EAAkB8D,MACjDwD,GAAKvB,EACL/B,GAAO+B,EACPY,GAAOZ,QAEF,CAAEuB,EAAAA,EAAGX,IAAAA,EAAK3C,IAAAA,oCAGV6B,OACDvH,EAAUD,KAAVC,MACe,UAAlBA,EAAMQ,aACF0I,cAAc3B,GAEK,SAAlBvH,EAAMQ,aACP2I,aAAa5B,QAGb6B,eAAe7B,0CAITA,OACPtB,EAAesB,EAAftB,EAAGC,EAAYqB,EAAZrB,EAAG5B,EAASiD,EAATjD,EAAGmD,EAAMF,EAANE,OACVnI,IAAM2G,OACN1G,IAAM2G,MAWPmD,EACAC,EAXEtJ,EAAUD,KAAVC,MAEJiC,EAMEjC,EANFiC,MACAC,EAKElC,EALFkC,OACAV,EAIExB,EAJFwB,eACAC,EAGEzB,EAHFyB,iBACAC,EAEE1B,EAFF0B,kBACAC,EACE3B,EADF2B,mBAKCM,GAASA,EAAMsD,OAASA,SACzB8D,GAAa,EACNpH,EAAMsD,WACNA,EACHjB,EAAIrC,EAAMuD,SAIbtD,GAAUA,EAAOqD,OAASA,SAC3B+D,GAAc,EACPpH,EAAOqD,WACPA,EACHkC,EAAIvF,EAAOsD,MAKjBS,GAAKtE,EAAgB6D,MACrB+B,EAAKtB,EAAIA,EACTC,GAAK1E,EAAegE,MACpB+B,EAAKrB,EAAIA,EACT5B,GAAK3C,EAAgB6D,MAAQ/D,EAAiB+D,MAC9CiC,GAAKjG,EAAegE,MAAQ9D,EAAkB8D,WAEzChG,QAAU6J,EAAa/E,EAAI2B,EAAIsB,EAAKtB,OACpCxG,SAAW6J,EAAc7B,EAAIvB,EAAIqB,EAAKrB,uCAIrCF,EAAoCjG,KAApCiG,IAAKhG,EAA+BD,KAA/BC,MAAOiG,EAAwBlG,KAAxBkG,EAAGC,EAAqBnG,KAArBmG,EAAGjE,EAAkBlC,KAAlBkC,MAAOC,EAAWnC,KAAXmC,OAE7B4C,EASE9E,EATF8E,gBACAtD,EAQExB,EARFwB,eACA+H,EAOEvJ,EAPFuJ,eACA9H,EAMEzB,EANFyB,iBACA+H,EAKExJ,EALFwJ,iBACA9H,EAIE1B,EAJF0B,kBACA+H,EAGEzJ,EAHFyJ,kBACA9H,EAEE3B,EAFF2B,gBACA+H,EACE1J,EADF0J,mBAEC5E,IACDkB,EAAI2D,YACJ3D,EAAIK,UAAYvB,EAChBkB,EAAI4D,KAAK7J,KAAKkG,EAAGlG,KAAKmG,EAAGnG,KAAKkC,MAAOlC,KAAKmC,QAC1C8D,EAAI6D,OACJ7D,EAAI8D,aAEHtI,EAAegE,MAAO,CACvBQ,EAAI2D,YACJ3D,EAAI+D,UAAYvI,EAAegE,MAC/BQ,EAAIgE,YAAcT,MACdU,EAAK/D,EAA2B,GAAvB1E,EAAegE,MAC5BQ,EAAIkE,OAAOjE,EAAItE,EAAgB6D,MAAOyE,GACtCjE,EAAImE,OAAOlE,EAAItE,EAAgB6D,MAAQvD,EAAOgI,GAC9CjE,EAAItD,SACJsD,EAAI8D,eAEHrI,EAAiB+D,MAAO,CACzBQ,EAAI2D,YACJ3D,EAAI+D,UAAYtI,EAAiB+D,MACjCQ,EAAIgE,YAAcR,MACdY,EAAKnE,EAAIhE,EAAQN,EAAgB6D,MAAiC,GAAzB/D,EAAiB+D,MAC9DQ,EAAIkE,OAAOE,EAAIlE,GACfF,EAAImE,OAAOC,EAAIlE,EAAIhE,EAASV,EAAegE,MAAQ9D,EAAkB8D,OACrEQ,EAAItD,SACJsD,EAAI8D,eAEHpI,EAAkB8D,MAAO,CAC1BQ,EAAI2D,YACJ3D,EAAI+D,UAAYrI,EAAkB8D,MAClCQ,EAAIgE,YAAcP,MACdQ,EAAK/D,EAAIhE,EAASV,EAAegE,MAAkC,GAA1B9D,EAAkB8D,MAC/DQ,EAAIkE,OAAOjE,EAAItE,EAAgB6D,MAAOyE,GACtCjE,EAAImE,OAAOlE,EAAItE,EAAgB6D,MAAQvD,EAAOgI,GAC9CjE,EAAItD,SACJsD,EAAI8D,YAEHnI,EAAgB6D,QACjBQ,EAAI2D,YACJ3D,EAAI+D,UAAYpI,EAAgB6D,MAChCQ,EAAIgE,YAAcN,EAClB1D,EAAIkE,OAAOjE,EAA4B,GAAxBtE,EAAgB6D,MAAaU,GAC5CF,EAAImE,OAAOlE,EAA4B,GAAxBtE,EAAgB6D,MAAaU,EAAIhE,EAASV,EAAegE,MAAQ9D,EAAkB8D,OAClGQ,EAAItD,SACJsD,EAAI8D,oDAKC/J,KAAKsK,kDAGL,2CAGgDtK,KAAjDC,MAAS2B,IAAAA,gBAAiBF,IAAAA,wBACzB1B,KAAKkC,MAAQN,EAAgB6D,MAAQ/D,EAAiB+D,gDAGNzF,KAAjDC,MAASwB,IAAAA,eAAgBE,IAAAA,yBACxB3B,KAAKmC,OAASV,EAAegE,MAAQ9D,EAAkB8D,wCAGjDlC,UACNuF,EAASlE,eAAerB,YClL7BuF,EAAW,MACR,QACC,GAEJyB,EAAS,OACL,GAGJC,wBACQC,EAASvM,EAAOwM,mDACpBxM,KACDoM,UAAYG,IACZE,WAAaD,IACbE,aAAe,gBALN3M,yCAeLgI,cACLtH,EAAO,QACNkM,mBAAmB7K,KAAK0K,SAAU/L,EAAMsH,OACzC,IAAI1H,EAAII,EAAKF,OAAS,EAAO,EAAJF,EAAOA,IAAK,KACnCG,EAAOC,EAAKJ,MACbG,aAAgBiI,EAAM,KACnBmE,EAAOnM,EAAKJ,EAAI,GACjBuM,aAAgBnE,GACjBmE,EAAK1E,SAAW1H,EAAK0H,QACrBzH,EAAKS,OAAOb,EAAG,IAGfA,QAIoB,WAAvByB,KAAKC,MAAMQ,SAAsD,SAA9BT,KAAK+K,OAAO9K,MAAMQ,YAClD,IAAIlC,EAAII,EAAKF,OAAS,EAAQ,GAALF,EAAQA,IAAK,KACpCG,EAAOC,EAAKJ,MACbG,aAAgB8L,GAA8B,WAAvB9L,EAAKuB,MAAMQ,cAC7B,IAAIuK,MAAM,gCAKtBrM,EAAKmE,QAAQ,SAAApE,GACXA,EAAKmB,MAAQoG,EAIbvH,EAAKoB,SAAWmL,EAChBvM,EAAKiB,OAPI,YASNgL,WAAahM,6CAGD+L,EAAU/L,EAAMsH,cAC9B9H,MAAMC,QAAQsM,GACfA,EAAS5H,QAAQ,SAAApE,GACfwM,EAAKL,mBAAmBnM,EAAMC,EAAMsH,KAGhCyE,aAAoBF,GAC1B7L,EAAKQ,KAAKuL,GACVA,EAASS,WAAWlF,IAGdyE,aAAoB3B,EAC1BpK,EAAKQ,KAAKuL,GAGHjH,EAAKD,MAAMkH,IAClB/L,EAAKQ,KAAK,IAAIwH,EAAK+D,8CAMjBzK,EAAQD,KAAKD,QAEbE,EAAMQ,UAAmE,IAAxD,CAAC,OAAQ,QAAS,UAAUiE,QAAQzE,EAAMQ,WAC1D8J,EAAO3F,eAAe5E,KAAKyK,SAC5BxK,EAAMQ,QAAU,SAGhBR,EAAMQ,QAAU,aAIhBsK,EAAS/K,KAAK+K,UACfA,EAAQ,KACLK,EAAcL,EAAO9K,OACxB,WAAY,aAAc,YAAa,aAAc,YAAa,QAAS,aAAa6C,QAAQ,SAAA/D,IAC3FkB,EAAM2E,eAAe7F,IAAMqM,EAAYxG,eAAe7F,KACxDkB,EAAMlB,GAAKqM,EAAYrM,MAK7ByH,EAAI7B,UAAU1E,QACTyK,SAAS5H,QAAQ,SAAApE,GACjBA,aAAgB8L,EACjB9L,EAAK2M,cAEC3M,aAAgBqK,EACtBrK,EAAK2M,eAGL3M,EAAKqB,QAAUE,EAEfvB,EAAK4M,sDAMI/G,WACPmG,EAAa1K,KAAb0K,SACEnM,EAAI,EAAGA,EAAImM,EAASjM,OAAQF,IAAK,IAEpCgG,EAAI,SACEA,MAEL7F,EAAOgM,EAASnM,GACjBG,aAAgB8L,GAAO9L,aAAgBqK,EACxCxE,EAAI7F,EAAK6M,eAAehH,GAGxBA,GAAK7F,EAAK2J,iBAGP9D,oCAICkC,QACHlH,KAAOkH,OACPiE,SAAS5H,QAAQ,SAAApE,GACjBA,GACDA,EAAKwJ,UAAUzB,uCAMXA,QACHjH,KAAOiH,OACPiE,SAAS5H,QAAQ,SAAApE,GACjBA,GACDA,EAAKyJ,UAAU1B,4CAKNuC,EAAgBzE,EAAGmD,EAAG8D,OAC/BvC,EAAI,EACJX,EAAM,EACN3C,EAAM,EACJ+E,EAAoB1K,KAApB0K,SAAUzK,EAAUD,KAAVC,MAGdiC,EAMEjC,EANFiC,MACAC,EAKElC,EALFkC,OACAV,EAIExB,EAJFwB,eACAC,EAGEzB,EAHFyB,iBACAC,EAEE1B,EAFF0B,kBACAC,EACE3B,EADF2B,gBAEEsH,EAAOF,EAAiB9G,EAAQC,KACjC+G,EAAK1D,OAASA,IACfyD,EAAItD,GAAOuD,EAAKzD,MAEb+F,IACDlD,EAAMW,IAIVyB,EAAS5H,QAAQ,SAAApE,MACZA,aAAgB8L,GAAO9L,aAAgBqK,EAAM,OACRrK,EAAK+M,eAAezC,EAAgBzE,EAAGmD,GAAG,GAAvEgE,IAAHzC,EAAY0C,IAALrD,IAAgBsD,IAALjG,IACxBsD,EAAIvD,KAAKC,IAAIsD,EAAGyC,GAChBpD,EAAM5C,KAAKC,IAAI2C,EAAKqD,GACpBhG,EAAMD,KAAKC,IAAIA,EAAKiG,QAIpBjG,EAFMqD,GACNV,EAAM5C,KAAKC,IAAIjH,EAAK6I,UAAWe,GACzB5C,KAAKC,IAAIjH,EAAK2J,UAAW1C,KAG/BjH,EAAKmN,SAAS,CACZ3F,EAAG,EACHC,EAAG,EACH5B,EAAAA,EACAmD,EAAAA,IACC,GACHY,EAAM5C,KAAKC,IAAI2C,EAAK5J,EAAKyD,QACnBuD,KAAKC,IAAIA,EAAKjH,EAAKyD,WAI1B6G,EAAgB,KACbzE,EAAI7C,EAAiB+D,MAAQ7D,EAAgB6D,MACjDwD,GAAK1E,EACLoB,GAAOpB,EACP+D,GAAO/D,MAEJ,KACCmD,EAAIjG,EAAegE,MAAQ9D,EAAkB8D,MACjDwD,GAAKvB,EACL/B,GAAO+B,EACPY,GAAOZ,QAEF,CAAEuB,EAAAA,EAAGX,IAAAA,EAAK3C,IAAAA,oCAGV6B,OACDvH,EAAUD,KAAVC,MACe,UAAlBA,EAAMQ,aACF0I,cAAc3B,GAEK,SAAlBvH,EAAMQ,aACP2I,aAAa5B,QAGb6B,eAAe7B,yCAKVA,cACNtB,EAAesB,EAAftB,EAAGC,EAAYqB,EAAZrB,EAAG5B,EAASiD,EAATjD,EAAGmD,EAAMF,EAANE,OACVnI,IAAM2G,OACN1G,IAAM2G,OACN1G,QAAU8E,MAWXgF,EAVEmB,EAAoB1K,KAApB0K,SAAUzK,EAAUD,KAAVC,MAEdiC,EAMEjC,EANFiC,MACAC,EAKElC,EALFkC,OACAV,EAIExB,EAJFwB,eACAC,EAGEzB,EAHFyB,iBACAC,EAEE1B,EAFF0B,kBACAC,EACE3B,EADF2B,mBAICM,GAASA,EAAMsD,OAASA,SAClBtD,EAAMsD,WACNA,EACHjB,EAAIrC,EAAMuD,SAIbtD,GAAUA,EAAOqD,OAASA,SAC3B+D,GAAc,EACPpH,EAAOqD,WACPA,EACHkC,EAAIvF,EAAOsD,iBAERD,EACHkC,GAAoB,IAAfvF,EAAOsD,MAKlBS,GAAKtE,EAAgB6D,MACrB+B,EAAKtB,EAAIA,EACTC,GAAK1E,EAAegE,MACpB+B,EAAKrB,EAAIA,EACT5B,GAAK3C,EAAgB6D,MAAQ/D,EAAiB+D,MAC9CiC,GAAKjG,EAAegE,MAAQ9D,EAAkB8D,UAE1CqG,EAAY,IAAIrD,EAAUvC,EAAGC,GACjCuE,EAAS5H,QAAQ,SAAApE,MACZA,aAAgB8L,EACS,WAAvB9L,EAAKuB,MAAMQ,QAETyF,IAAMsB,EAAKtB,GACZ4F,EAAUC,IAAIrN,GACdA,EAAK2K,eAAe,CAClBnD,EAAAA,EACAC,EAAAA,EACA5B,EAAAA,EACAmD,EAAAA,IAEFxB,GAAKxH,EAAKsN,aAMD,GAFAtN,EAAK6M,eAAehH,EAAI2B,GAG/BxH,EAAK2K,eAAe,CAClBnD,EAAAA,EACAC,EAAAA,EACA5B,EAAAA,KAKF0H,EAAKC,WAAW/M,KAAK2M,GACrBA,EAAU7J,gBACViE,EAAIsB,EAAKtB,EACTC,GAAK2F,EAAU3J,OACfzD,EAAK2K,eAAe,CAClBnD,EAAGsB,EAAKtB,EACRC,EAAAA,EACA5B,EAAAA,IAEFuH,EAAY,IAAIrD,EAAUvC,EAAGC,IAE/BD,GAAKxH,EAAKsN,WACVF,EAAUC,IAAIrN,KAKboN,EAAUK,OACXF,EAAKC,WAAW/M,KAAK2M,GACrBA,EAAU7J,gBACVkE,GAAK2F,EAAU3J,OACf2J,EAAY,IAAIrD,EAAUjB,EAAKtB,EAAGC,IAEpCzH,EAAKmN,SAAS,CACZ3F,EAAGsB,EAAKtB,EACRC,EAAAA,EACA5B,EAAAA,EACAmD,EAAAA,IAEFxB,EAAIsB,EAAKtB,EACTC,GAAKzH,EAAK0N,kBAGT,GAAG1N,aAAgBqK,EAEnB+C,EAAUK,OACXF,EAAKC,WAAW/M,KAAK2M,GACrBA,EAAU7J,gBACVkE,GAAK2F,EAAU3J,OACf2J,EAAY,IAAIrD,EAAUjB,EAAKtB,EAAGC,IAEpCzH,EAAKmN,SAAS,CACZ3F,EAAGsB,EAAKtB,EACRC,EAAAA,EACA5B,EAAAA,IAEF2B,EAAIsB,EAAKtB,EACTC,GAAKzH,EAAK0N,gBAGP,IAEAlG,IAAMsB,EAAKtB,EACZ4F,EAAUC,IAAIrN,GACdA,EAAKmN,SAAS,CACZ3F,EAAAA,EACAC,EAAAA,EACA5B,EAAAA,EACAmD,EAAAA,IAEFxB,GAAKxH,EAAKwD,WAMD,GAFAxD,EAAK6M,eAAehH,EAAI2B,GAG/BxH,EAAKmN,SAAS,CACZ3F,EAAAA,EACAC,EAAAA,EACA5B,EAAAA,EACAmD,EAAAA,KAKFuE,EAAKC,WAAW/M,KAAK2M,GACrBA,EAAU7J,gBACViE,EAAIsB,EAAKtB,EACTC,GAAK2F,EAAU3J,OACfzD,EAAKmN,SAAS,CACZ3F,EAAGsB,EAAKtB,EACRC,EAAAA,EACA5B,EAAAA,EACAmD,EAAAA,IAEFoE,EAAY,IAAIrD,EAAUvC,EAAGC,IAE/BD,GAAKxH,EAAKwD,MACV4J,EAAUC,IAAIrN,MAKjBoN,EAAUK,YACND,WAAW/M,KAAK2M,GACrBA,EAAU7J,gBACVkE,GAAK2F,EAAU3J,aAEZ1C,QAAU8E,OACV7E,SAAW6J,EAAc7B,EAAIvB,EAAIqB,EAAKrB,uCAIhCqB,OACLtB,EAAesB,EAAftB,EAAGC,EAAYqB,EAAZrB,EAAG5B,EAASiD,EAATjD,EAAGmD,EAAMF,EAANE,OACVnI,IAAM2G,OACN1G,IAAM2G,OACN1G,QAAU8E,MAaXgF,EAZEmB,EAAoB1K,KAApB0K,SAAUzK,EAAUD,KAAVC,MAEdiC,EAQEjC,EARFiC,MACAC,EAOElC,EAPFkC,OACAI,EAMEtC,EANFsC,cACAd,EAKExB,EALFwB,eACAC,EAIEzB,EAJFyB,iBACAC,EAGE1B,EAHF0B,kBACAC,EAEE3B,EAFF2B,gBACAY,EACEvC,EADFuC,kBAICN,GAASA,EAAMsD,OAASA,SAClBtD,EAAMsD,WACNA,EACHjB,EAAIrC,EAAMuD,SAIbtD,GAAUA,EAAOqD,OAASA,SAC3B+D,GAAc,EACPpH,EAAOqD,WACPA,EACHkC,EAAIvF,EAAOsD,iBAERD,EACHkC,GAAoB,IAAfvF,EAAOsD,MAKlBS,GAAKtE,EAAgB6D,MACrB+B,EAAKtB,EAAIA,EACTC,GAAK1E,EAAegE,MACpB+B,EAAKrB,EAAIA,EACT5B,GAAK3C,EAAgB6D,MAAQ/D,EAAiB+D,MAC9CiC,GAAKjG,EAAegE,MAAQ9D,EAAkB8D,UAC1CuD,EAAmC,QAAlBzG,MAEjByG,IAAmBO,SACrBmB,EAAS5H,QAAQ,SAAApE,MACZA,aAAgB8L,GAAO9L,aAAgBqK,EAAM,KACtC9I,EAA2DvB,EAA3DuB,QAA2DvB,EAApDuB,MAASQ,IAAAA,QAAS8B,IAAAA,cAAeL,IAAAA,QAAOC,OAExC,WAAZ1B,EACDR,EAAMQ,QAAU,QAGE,SAAZA,GAAwC,QAAlB8B,GAA2BL,EAAMsD,OAASA,IACtEtD,EAAMuD,MAAQlB,EACdrC,EAAMsD,KAAOA,GAEf9G,EAAKmN,SAAS,CACZ3F,EAAAA,EACAC,EAAAA,EACA5B,EAAAA,EACAmD,EAAAA,IAEFvB,GAAKzH,EAAK0N,iBAGV1N,EAAKmN,SAAS,CACZ3F,EAAAA,EACAC,EAAAA,EACA5B,EAAAA,EACAmD,EAAAA,IAEFvB,GAAKzH,EAAK0N,mBAGT3M,QAAU8E,YACV7E,SAAWyG,EAAIqB,EAAKrB,OAIvBkG,EAAW,GACXC,EAAa,GACbC,EAAY,GACZC,EAAU,GACVC,EAAU,EACVC,EAAY,EACZC,EAAW,EACXC,EAAS,EACblC,EAAS5H,QAAQ,SAAApE,MACZA,aAAgB8L,GAAO9L,aAAgBqK,EAAM,OACJrK,EAAKuB,MAAzCmC,IAAAA,SAAUC,IAAAA,WAAYC,IAAAA,UAC5B+J,EAASlN,KAAKiD,GACdkK,EAAWnN,KAAKkD,GAChBoK,GAAWrK,EACXsK,GAAarK,QACS3D,EAAK+M,eAAezC,EAAgBzE,EAAGmD,GAAvDuB,IAAAA,EAAGX,IAAAA,IAAK3C,IAAAA,IAEXrD,EAAUkD,OAASA,GACpB+G,EAAUpN,KAAKwG,GACfgH,GAAYhH,GAENrD,EAAUkD,OAASA,GACzByD,EAAI3G,EAAUmD,MACd8G,EAAUpN,KAAK8J,GACf0D,GAAY1D,GAEN3G,EAAUkD,OAASA,IACzByD,GAAKD,EAAiBzE,EAAImD,GAAKpF,EAAUmD,MACzC8G,EAAUpN,KAAK8J,GACf0D,GAAY1D,GAEd2D,GAAUjH,EACV6G,EAAQrN,KAAKmJ,QAGb+D,EAASlN,KAAK,GACdmN,EAAWnN,KAAK,GAChBuN,GAAa,EACV1D,GACDuD,EAAUpN,KAAKT,EAAK2J,WACpBsE,GAAYjO,EAAK2J,UACjBuE,GAAUlO,EAAK2J,UACfmE,EAAQrN,KAAKT,EAAK6I,aAGlB7I,EAAKmN,SAAS,CACZ3F,EAAG,EACHC,EAAG,EACH5B,EAAAA,EACAmD,EAAAA,IACC,GACH6E,EAAUpN,KAAKT,EAAKyD,QACpBwK,GAAYjO,EAAKyD,OACjByK,GAAUlO,EAAKyD,OACfqK,EAAQrN,KAAKT,EAAKyD,eAIpB0K,EAAW,EACXC,EAAO,EAEPC,GAAuB/D,EAAiBzE,EAAImD,GAA/BkF,KACjBlC,EAAS5H,QAAQ,SAACpE,EAAMH,OAClB2K,EACA8D,EAASV,EAAW/N,GACpB0O,EAAOZ,EAAS9N,MAEjBwO,EAAY,KACTG,EAAWP,GAAY3D,EAAiBzE,EAAImD,GAChDwB,EAAO8D,EAAUT,EAAUhO,GAAK2O,EAAWF,EAASN,EAAaH,EAAUhO,QAG3EuO,GAAQ9D,EAAiBzE,EAAImD,GAAKiF,EAClCzD,EAAO+D,EAAQV,EAAUhO,GAAKuO,EAAOG,EAAOR,EAAWF,EAAUhO,MAGnE2K,EAAOxD,KAAKC,IAAIuD,EAAMsD,EAAQjO,IAC3BG,aAAgB8L,GAAO9L,aAAgBqK,EAAM,KACtC9I,EAA2DvB,EAA3DuB,QAA2DvB,EAApDuB,MAASQ,IAAAA,QAAS8B,IAAAA,cAAeL,IAAAA,MAAOC,IAAAA,OACpD6G,GAEc,UAAZvI,EACDR,EAAMQ,QAAU,SAGE,SAAZA,GAAwC,WAAlB8B,GAA8BgH,GAAepH,EAAOqD,OAASA,IACzFrD,EAAOsD,MAAQiC,EACfvF,EAAOqD,KAAOA,GAEhB9G,EAAKmN,SAAS,CACZ3F,EAAAA,EACAC,EAAAA,EACA5B,EAAG2E,EACHxB,EAAAA,MAKa,WAAZjH,EACDR,EAAMQ,QAAU,QAGE,SAAZA,GAAwC,QAAlB8B,GAA2BL,EAAMsD,OAASA,IACtEtD,EAAMuD,MAAQlB,EACdrC,EAAMsD,KAAOA,GAEf9G,EAAKmN,SAAS,CACZ3F,EAAAA,EACAC,EAAAA,EACA5B,EAAAA,EACAmD,EAAGwB,KAIJ6D,GAAcC,EACZhE,EACDtK,EAAKe,QAAUyJ,EAGfxK,EAAKgB,SAAWwJ,GAGX6D,GAAcE,IAClBjE,EACDtK,EAAKe,QAAUyJ,EAGfxK,EAAKgB,SAAWwJ,QAKpBxK,EAAKmN,SAAS,CACZ3F,EAAAA,EACAC,EAAAA,EACA5B,EAAGyE,EAAiBE,EAAO3E,EAC3BmD,EAAGsB,EAAiBtB,EAAIwB,IAK1B2D,EAFC7D,GACD9C,GAAKxH,EAAKsN,WACCtG,KAAKC,IAAIkH,EAAUnO,EAAK0N,eAGnCjG,GAAKzH,EAAK0N,YACVlG,EAAIsB,EAAKtB,EACER,KAAKC,IAAIkH,EAAUnO,EAAKsN,gBAInCe,GAA0B,IAAZN,GAAwB,EAAPK,EAAU,KACvCtO,EAAMkM,EAASjM,UACG,aAAnB+D,MACG,IAAIjE,EAAI,EAAGA,EAAIC,EAAKD,IAAK,KACvB4O,EAAQzC,EAASnM,GACrByK,EAAiBmE,EAAMjF,UAAU4E,GAAQK,EAAMhF,UAAU2E,QAGxD,GAAsB,WAAnBtK,UACF4K,EAAgB,GAAPN,EACLvO,EAAI,EAAGA,EAAIC,EAAKD,IAAK,KACvB4O,EAAQzC,EAASnM,GACrByK,EAAiBmE,EAAMjF,UAAUkF,GAAUD,EAAMhF,UAAUiF,QAG1D,GAAsB,kBAAnB5K,UACF6K,EAAUP,GAAQtO,EAAM,GACpBD,EAAI,EAAGA,EAAIC,EAAKD,IAAK,KACvB4O,EAAQzC,EAASnM,GACrByK,EAAiBmE,EAAMjF,UAAUmF,EAAU9O,GAAK4O,EAAMhF,UAAUkF,EAAU9O,QAGzE,GAAsB,iBAAnBiE,UACF8K,EAASR,GAAQtO,EAAM,GACnBD,EAAI,EAAGA,EAAIC,EAAKD,IAAK,KACvB4O,EAAQzC,EAASnM,GACrByK,EAAiBmE,EAAMjF,UAAUoF,GAAU/O,EAAI,IAAM4O,EAAMhF,UAAUmF,GAAU/O,EAAI,KAKtFyK,IAEEO,IACDsD,EAAWnF,GAEbvB,GAAK0G,GAGPnC,EAAS5H,QAAQ,SAAApE,OACTuB,EAAUvB,EAAVuB,MACH+I,EACEtK,EAAKuB,MAAMkC,OAAOqD,OAASA,IAC5B9G,EAAKgB,SAAWmN,EAAW5M,EAAMwB,eAAegE,MAAQxF,EAAM0B,kBAAkB8D,OAI/E/G,EAAKuB,MAAMiC,MAAMsD,OAASA,IAC3B9G,EAAKe,QAAUoN,EAAW5M,EAAMyB,iBAAiB+D,MAAQxF,EAAM2B,gBAAgB6D,cAIhFhG,QAAU8E,OACV7E,SAAW6J,EAAc7B,EAAIvB,EAAIqB,EAAKrB,yCAI9BqB,cACPtB,EAAesB,EAAftB,EAAGC,EAAYqB,EAAZrB,EAAG5B,EAASiD,EAATjD,EAAGmD,EAAMF,EAANE,OACVnI,IAAM2G,OACN1G,IAAM2G,MAYPmD,EACAC,EAZA5B,EAAOzB,EACLwE,EAAoB1K,KAApB0K,SAAUzK,EAAUD,KAAVC,MAEdiC,EAMEjC,EANFiC,MACAC,EAKElC,EALFkC,OACAV,EAIExB,EAJFwB,eACAC,EAGEzB,EAHFyB,iBACAC,EAEE1B,EAFF0B,kBACAC,EACE3B,EADF2B,mBAKCM,GAASA,EAAMsD,OAASA,SACzB8D,GAAa,EACNpH,EAAMsD,WACNA,EACHjB,EAAIrC,EAAMuD,SAIbtD,GAAUA,EAAOqD,OAASA,SAC3B+D,GAAc,EACPpH,EAAOqD,WACPA,EACHkC,EAAIvF,EAAOsD,MAKjBS,GAAKtE,EAAgB6D,MACrB+B,EAAKtB,EAAIA,EACTC,GAAK1E,EAAegE,MACpB+B,EAAKrB,EAAIA,EACT5B,GAAK3C,EAAgB6D,MAAQ/D,EAAiB+D,MAC9CiC,GAAKjG,EAAegE,MAAQ9D,EAAkB8D,UAE1CqG,EAAY,IAAIrD,EAAUvC,EAAGC,GACjCuE,EAAS5H,QAAQ,SAAApE,GACZA,aAAgB8L,EAEdtE,IAAMsB,EAAKtB,GACZ4F,EAAUC,IAAIrN,GACdA,EAAK2K,eAAe,CAClBnD,EAAAA,EACAC,EAAAA,EACA5B,EAAAA,IAEF2B,GAAKxH,EAAKsN,WACVrE,EAAOjC,KAAKC,IAAIgC,EAAMzB,KAMb,GAFAxH,EAAK6M,eAAehH,EAAI2B,GAG/BxH,EAAK2K,eAAe,CAClBnD,EAAAA,EACAC,EAAAA,EACA5B,EAAAA,KAKFgJ,EAAKrB,WAAW/M,KAAK2M,GACrBA,EAAU7J,gBACViE,EAAIsB,EAAKtB,EACTC,GAAK2F,EAAU3J,OACfzD,EAAK2K,eAAe,CAClBnD,EAAGsB,EAAKtB,EACRC,EAAAA,EACA5B,EAAAA,IAEFuH,EAAY,IAAIrD,EAAUvC,EAAGC,IAE/BD,GAAKxH,EAAKsN,WACVrE,EAAOjC,KAAKC,IAAIgC,EAAMzB,GACtB4F,EAAUC,IAAIrN,IAKbwH,IAAMsB,EAAKtB,GACZ4F,EAAUC,IAAIrN,GACdA,EAAKmN,SAAS,CACZ3F,EAAAA,EACAC,EAAAA,EACA5B,EAAAA,EACAmD,EAAAA,IAEFxB,GAAKxH,EAAKwD,MACVyF,EAAOjC,KAAKC,IAAIgC,EAAMzB,KAMb,GAFAxH,EAAK6M,eAAehH,EAAI2B,GAG/BxH,EAAKmN,SAAS,CACZ3F,EAAAA,EACAC,EAAAA,EACA5B,EAAAA,EACAmD,EAAAA,KAKF6F,EAAKrB,WAAW/M,KAAK2M,GACrBA,EAAU7J,gBACViE,EAAIsB,EAAKtB,EACTC,GAAK2F,EAAU3J,OACfzD,EAAKmN,SAAS,CACZ3F,EAAGsB,EAAKtB,EACRC,EAAAA,EACA5B,EAAAA,EACAmD,EAAAA,IAEFoE,EAAY,IAAIrD,EAAUvC,EAAGC,IAE/BD,GAAKxH,EAAKwD,MACVyF,EAAOjC,KAAKC,IAAIgC,EAAMzB,GACtB4F,EAAUC,IAAIrN,MAKjBoN,EAAUK,YACND,WAAW/M,KAAK2M,GACrBA,EAAU7J,gBACVkE,GAAK2F,EAAU3J,aAGZ1C,QAAU6J,EAAa/E,EAAIoD,EAAOH,EAAKtB,OACvCxG,SAAW6J,EAAc7B,EAAIvB,EAAIqB,EAAKrB,uCAIrCF,EAA8CjG,KAA9CiG,IAAKhG,EAAyCD,KAAzCC,MAAOyK,EAAkC1K,KAAlC0K,SAAUxE,EAAwBlG,KAAxBkG,EAAGC,EAAqBnG,KAArBmG,EAAGjE,EAAkBlC,KAAlBkC,MAAOC,EAAWnC,KAAXmC,OAEvC4C,EASE9E,EATF8E,gBACAtD,EAQExB,EARFwB,eACA+H,EAOEvJ,EAPFuJ,eACA9H,EAMEzB,EANFyB,iBACA+H,EAKExJ,EALFwJ,iBACA9H,EAIE1B,EAJF0B,kBACA+H,EAGEzJ,EAHFyJ,kBACA9H,EAEE3B,EAFF2B,gBACA+H,EACE1J,EADF0J,mBAEC5E,IACDkB,EAAI2D,YACJ3D,EAAIK,UAAYvB,EAChBkB,EAAI4D,KAAK7J,KAAKkG,EAAGlG,KAAKmG,EAAGnG,KAAKkC,MAAOlC,KAAKmC,QAC1C8D,EAAI6D,OACJ7D,EAAI8D,aAEHtI,EAAegE,MAAO,CACvBQ,EAAI2D,YACJ3D,EAAI+D,UAAYvI,EAAegE,MAC/BQ,EAAIgE,YAAcT,MACdU,EAAK/D,EAA2B,GAAvB1E,EAAegE,MAC5BQ,EAAIkE,OAAOjE,EAAItE,EAAgB6D,MAAOyE,GACtCjE,EAAImE,OAAOlE,EAAItE,EAAgB6D,MAAQvD,EAAOgI,GAC9CjE,EAAItD,SACJsD,EAAI8D,eAEHrI,EAAiB+D,MAAO,CACzBQ,EAAI2D,YACJ3D,EAAI+D,UAAYtI,EAAiB+D,MACjCQ,EAAIgE,YAAcR,MACdY,EAAKnE,EAAIhE,EAAQN,EAAgB6D,MAAiC,GAAzB/D,EAAiB+D,MAC9DQ,EAAIkE,OAAOE,EAAIlE,GACfF,EAAImE,OAAOC,EAAIlE,EAAIhE,EAASV,EAAegE,MAAQ9D,EAAkB8D,OACrEQ,EAAItD,SACJsD,EAAI8D,eAEHpI,EAAkB8D,MAAO,CAC1BQ,EAAI2D,YACJ3D,EAAI+D,UAAYrI,EAAkB8D,MAClCQ,EAAIgE,YAAcP,MACdQ,EAAK/D,EAAIhE,EAASV,EAAegE,MAAkC,GAA1B9D,EAAkB8D,MAC/DQ,EAAIkE,OAAOjE,EAAItE,EAAgB6D,MAAOyE,GACtCjE,EAAImE,OAAOlE,EAAItE,EAAgB6D,MAAQvD,EAAOgI,GAC9CjE,EAAItD,SACJsD,EAAI8D,YAEHnI,EAAgB6D,QACjBQ,EAAI2D,YACJ3D,EAAI+D,UAAYpI,EAAgB6D,MAChCQ,EAAIgE,YAAcN,EAClB1D,EAAIkE,OAAOjE,EAA4B,GAAxBtE,EAAgB6D,MAAaU,GAC5CF,EAAImE,OAAOlE,EAA4B,GAAxBtE,EAAgB6D,MAAaU,EAAIhE,EAASV,EAAegE,MAAQ9D,EAAkB8D,OAClGQ,EAAItD,SACJsD,EAAI8D,aAENW,EAAS5H,QAAQ,SAAApE,GACZA,GACDA,EAAKuJ,kDAMFjI,KAAKsK,kDAGLtK,KAAK2K,qDAGL3K,KAAK4K,kDAGRpM,EAAMwB,KAAKkM,WAAWzN,UACvBD,EAAK,KACF+J,EAAOvI,KAAKkM,WAAW1N,EAAM,UAC1B+J,EAAKpC,EAAInG,KAAKmG,EAAIoC,EAAKC,gBAEzBxI,KAAKmG,2CAG2CnG,KAAjDC,MAAS2B,IAAAA,gBAAiBF,IAAAA,wBACzB1B,KAAKkC,MAAQN,EAAgB6D,MAAQ/D,EAAiB+D,gDAGNzF,KAAjDC,MAASwB,IAAAA,eAAgBE,IAAAA,yBACxB3B,KAAKmC,OAASV,EAAegE,MAAQ9D,EAAkB8D,wCAGjDlC,UACNuF,EAASlE,eAAerB,gBC94B7BiK,wBACQtP,EAAOwM,mDACX,SAAUxM,EAAOwM,KAClB+C,OAAS,kBAHGjD,kDAMOkD,IAArB1N,KAAK9B,MAAMgE,MAAqB,KAC7BuD,EAAQkI,SAAS3N,KAAK9B,MAAMgE,QAC5B0L,MAAMnI,IAAkB,EAARA,SACbhG,QAAUgG,WAGMiI,IAAtB1N,KAAK9B,MAAMiE,OAAsB,KAC9BsD,EAAQkI,SAAS3N,KAAK9B,MAAMiE,SAC5ByL,MAAMnI,IAAkB,EAARA,SACb/F,SAAW+F,8CAvBJ1G,EAAGgE,EACjBQ,EA2BES,EAAM,UAEFzF,EAAI,EAAGC,EAAMwB,KAAKf,QAAQR,OAAQF,EAAIC,EAAKD,IAAK,KAClDG,EAAOsB,KAAKf,QAAQV,GACxByF,IAhCcjF,EAgCIL,EAAK,GAhCNqE,EAgCUrE,EAAK,QA/BhC6E,EAAAA,EAAIpF,MAAMC,QAAQ2E,GAAKU,EAAKM,gBAAgBhB,GAAKU,EAAKH,UAAUP,GAC3D,cAANhE,IACDA,EAAI,SAEC,IAAMA,EAAI,KAAO0E,EAAKQ,WAAWV,GAAG,GAAQ,YA6BjDS,GAAO,8CAGA6J,MACPA,EApDJ,SAAgBA,MACXpK,EAAKE,SAASkK,GAAM,KACjBC,EAAIC,SAASC,cAAcH,OAC3BC,QACI,IAAI9C,MAAM,iCAAmC6C,UAE9CC,MAELD,QACI,IAAI7C,MAAM,qBAAuB6C,UAElCA,EAyCCI,CAAOJ,QACRK,YAE6B,WAA/BL,EAAIM,SAASC,mBACTX,OAASI,EACX7N,KAAKkC,OACN2L,EAAIQ,aAAa,QAASrO,KAAKkC,OAE9BlC,KAAKmC,QACN0L,EAAIQ,aAAa,SAAUrO,KAAKmC,YAI/B,KACCoB,EAAIvD,KAAKsO,UACbT,EAAIU,mBAAmB,YAAahL,OAChCiL,EAASX,EAAIY,iBAAiB,eAC7BhB,OAASe,EAAOA,EAAO/P,OAAS,OAGnCuB,KAAKkC,QAAUlC,KAAKmC,OAAQ,KAC1BqE,EAAMkI,OAAOC,iBAAiBd,EAAK,MACnC7N,KAAKkC,aACFzC,QAAUkO,SAASnH,EAAIoI,iBAAiB,UAC7Cf,EAAIQ,aAAa,QAASrO,KAAKkC,QAE7BlC,KAAKmC,cACFzC,SAAWiO,SAASnH,EAAIoI,iBAAiB,WAC9Cf,EAAIQ,aAAa,SAAUrO,KAAKmC,aAI9BlC,EAAUD,KAAVC,OACmD,IAAtD,CAAC,OAAQ,QAAS,QAAQyE,QAAQzE,EAAMQ,WACzCR,EAAMQ,QAAU,cAEbZ,MAAQG,KAAKyN,OAAOoB,WAAW,WAC/B1D,WAAWnL,KAAKH,OAErBI,EAAMiC,MAAQlC,KAAKkC,MACnBjC,EAAMkC,OAASnC,KAAKmC,YACfkJ,mBACAQ,SAAS,CACZ3F,EAAG,EACHC,EAAG,EACH5B,EAAGvE,KAAKkC,MACRwF,EAAG1H,KAAKmC,cAEL8F,6CAIEjI,KAAKyN,gBCzGVqB,wBACQ5Q,mDACJA,KACDoM,UAAY,UACZyE,QAAU,CAAC,EAAG,KACdC,MAAQ,CAAC,EAAG,GACd7Q,MAAMC,QAAQyK,EAAK3K,MAAM+Q,WACrBF,QAAUlG,EAAK3K,MAAM+Q,OAEzB9Q,MAAMC,QAAQyK,EAAK3K,MAAMgR,SACrBF,MAAQnG,EAAK3K,MAAMgR,kBAVXnG,sFAgBT7C,EAAgDlG,KAAhDkG,EAAGC,EAA6CnG,KAA7CmG,EAAGjE,EAA0ClC,KAA1CkC,MAAOC,EAAmCnC,KAAnCmC,OAAQlC,EAA2BD,KAA3BC,MAAOgG,EAAoBjG,KAApBiG,IAAKgJ,EAAejP,KAAfiP,MAAOC,EAAQlP,KAARkP,IAE5CzN,EAIExB,EAJFwB,eACAG,EAGE3B,EAHF2B,gBACAe,EAEE1C,EAFF0C,OACAC,EACE3C,EADF2C,YAEEuM,EAAUjJ,EAAItE,EAAgB6D,MAC9B2J,EAAUjJ,EAAI1E,EAAegE,MACjCQ,EAAIgE,YAActH,EAClBsD,EAAI+D,UAAYpH,EAChBqD,EAAI2D,YACJ3D,EAAIkE,OAAOgF,EAAUF,EAAM,GAAK/M,EAAOkN,EAAUH,EAAM,GAAK9M,GAC5D8D,EAAImE,OAAO+E,EAAUD,EAAI,GAAKhN,EAAOkN,EAAUF,EAAI,GAAK/M,GACxD8D,EAAItD,SACJsD,EAAI8D,iDAIG/J,KAAK+O,2CAGL/O,KAAKgP,eCtCVK,wBACQnR,mDACJA,KACDoM,UAAY,aACZgF,YAAc,GAChBnR,MAAMC,QAAQyK,EAAK3K,MAAMqR,eACrBD,YAAczG,EAAK3K,MAAMqR,wBANdxG,sFAYZ7C,EAA+ClG,KAA/CkG,EAAGC,EAA4CnG,KAA5CmG,EAAGjE,EAAyClC,KAAzCkC,MAAOC,EAAkCnC,KAAlCmC,OAAQlC,EAA0BD,KAA1BC,MAAOgG,EAAmBjG,KAAnBiG,IAAKsJ,EAAcvP,KAAduP,UAErC9N,EAIExB,EAJFwB,eACAG,EAGE3B,EAHF2B,gBACAe,EAEE1C,EAFF0C,OACAC,EACE3C,EADF2C,YAEEuM,EAAUjJ,EAAItE,EAAgB6D,MAC9B2J,EAAUjJ,EAAI1E,EAAegE,MACjCQ,EAAIgE,YAActH,EAClBsD,EAAI+D,UAAYpH,EAChBqD,EAAI2D,YACJ3D,EAAIkE,OAAOgF,EAAUI,EAAU,GAAG,GAAKrN,EAAOkN,EAAUG,EAAU,GAAG,GAAKpN,OACtE,IAAI5D,EAAI,EAAGC,EAAM+Q,EAAU9Q,OAAQF,EAAIC,EAAKD,IAAK,KAC/CiR,EAAQD,EAAUhR,GACtB0H,EAAImE,OAAO+E,EAAUK,EAAM,GAAKtN,EAAOkN,EAAUI,EAAM,GAAKrN,GAE9D8D,EAAItD,SACJsD,EAAI8D,qDAIG/J,KAAKsP,qBC9BZG,EAAQ,CACVxH,gBAAOuG,EAAQX,OACTW,aAAkBhB,QACd,IAAIxC,MAAM,qCAEf6C,GACDW,EAAOkB,SAAS7B,GAEXW,GAETmB,kBAASlF,EAASvM,EAAOwM,MACR,WAAZD,SACM,IAAI+C,EAAOtP,EAAOwM,MAExBF,EAAIoF,QAAQnF,UACN,IAAID,EAAIC,EAASvM,EAAOwM,SAE3B,IAAIM,MAAM,uBAAyBP,IAE3CoF,kBAASpF,EAASvM,MACb6K,EAAK6G,QAAQnF,UACPA,OACA,eACI,IAAIqE,EAAK5Q,OACb,kBACI,IAAImR,EAAQnR,SAGnB,IAAI8M,MAAM,4BAA8BP,IAEhDqF,kBAASrF,EAASvM,EAAOwM,YAGP,oBAAVgE,SACRA,OAAOe,MAAQA"}